{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.\\_]+"},"docs":[{"location":"","text":"This is a landing page, you can not add markdown content directly. Configure the landing page using meta tags in the header: --- title: Page title description: Page description links: - link: link-url/ title: Link title ---","title":"Technical documentation for ConsenSys products"},{"location":"contribute/","text":"Contribute to the documentation \u00b6 The following guidelines explain how to contribute to existing ConsenSys documentation repositories. You can also create new documentation sites . Your first contribution \u00b6 Start by choosing a documentation repository and looking for issues that have a Good First Issue label. Good First Issues might require only a few lines of documentation, or have enough information for a newcomer to easily document. When you\u2019ve identified an issue you want to work on, assign it to yourself, or message the ConsenSys team on that project\u2019s channel on Discord and a maintainer will assign it to you. Contribution workflow \u00b6 The documentation contribution workflow consists of forking repositories and submitting pull requests (PRs) using Git 1 . This facilitates social contribution, easy testing, and peer review. To contribute changes: Fork the documentation repository in which you want to make a change. Clone your fork to your computer. For repositories using the old system , add the --recursive option to retrieve the common submodule . git clone [ --recursive ] <FORKED-REPO> Add an upstream remote . git remote add upstream <ORIGINAL-REPO> Create and checkout a topic branch , naming it appropriately. We recommend using the issue number and short description, which is a reminder to fix only one issue in a PR. For example, 183-doc-cli-option . git checkout -b <ISSUE-NUM>-<ISSUE-DESC> Open the documentation repository in a text editor of your choice, for example IntelliJ , and make your changes. Refer to the documentation style guide and the MkDocs and Markdown guide when making documentation changes. Preview your changes with MkDocs to check that the changes render correctly. Add and commit your changes, using a clear commit message. Push your changes to your remote fork (usually named origin ). git add * git commit -m \"<COMMIT-MESSAGE>\" git push origin Navigate to the original ConsenSys documentation repository, and you\u2019ll see a banner prompting you to create a PR with your recent changes. Create a PR, filling out the description according to the template. Remember to link the issue that the PR fixes in the description. fixes #<ISSUE-NUM> The bottom of the PR page displays a list of checks that verify links, Markdown syntax, and more. If you have any errors , make any required changes to your PR, repeating steps 5\u20137. In the right sidebar of your PR, select the reviewer(s) who should review your PR (typically the original issue raiser). Ask the ConsenSys documentation team to review by selecting ConsenSys/protocol-pliny as a reviewer. If you don\u2019t know who to choose or can\u2019t because you\u2019re not a maintainer yet, select the reviewers listed by GitHub or keep the default value. Make any required changes to your PR based on reviewer feedback, repeating steps 5\u20137. After your PR is validated, all checks have passed, and your branch has no conflicts with the target branch, you can merge your PR. You can delete the topic branch after merging your PR. Tip You can use a Git client such as Fork instead of the command line. The following is a video demonstration of the contribution workflow: Code of conduct \u00b6 This project and everyone participating in it are governed by the contributor covenant code of conduct . By contributing to documentation, you\u2019re expected to uphold this code. Please report unacceptable behavior to private-quorum@consensys.net . Contributor License Agreement \u00b6 When you submit a PR for your first contribution to a documentation repository, you must read and sign the ConsenSys Individual Contributor License Agreement (CLA) when prompted before you can merge the PR. If you\u2019re new to Git, you can try the Learn Git Branching interactive tutorial . \u21a9","title":"Contribute to the documentation"},{"location":"contribute/#contribute-to-the-documentation","text":"The following guidelines explain how to contribute to existing ConsenSys documentation repositories. You can also create new documentation sites .","title":"Contribute to the documentation"},{"location":"contribute/#your-first-contribution","text":"Start by choosing a documentation repository and looking for issues that have a Good First Issue label. Good First Issues might require only a few lines of documentation, or have enough information for a newcomer to easily document. When you\u2019ve identified an issue you want to work on, assign it to yourself, or message the ConsenSys team on that project\u2019s channel on Discord and a maintainer will assign it to you.","title":"Your first contribution"},{"location":"contribute/#contribution-workflow","text":"The documentation contribution workflow consists of forking repositories and submitting pull requests (PRs) using Git 1 . This facilitates social contribution, easy testing, and peer review. To contribute changes: Fork the documentation repository in which you want to make a change. Clone your fork to your computer. For repositories using the old system , add the --recursive option to retrieve the common submodule . git clone [ --recursive ] <FORKED-REPO> Add an upstream remote . git remote add upstream <ORIGINAL-REPO> Create and checkout a topic branch , naming it appropriately. We recommend using the issue number and short description, which is a reminder to fix only one issue in a PR. For example, 183-doc-cli-option . git checkout -b <ISSUE-NUM>-<ISSUE-DESC> Open the documentation repository in a text editor of your choice, for example IntelliJ , and make your changes. Refer to the documentation style guide and the MkDocs and Markdown guide when making documentation changes. Preview your changes with MkDocs to check that the changes render correctly. Add and commit your changes, using a clear commit message. Push your changes to your remote fork (usually named origin ). git add * git commit -m \"<COMMIT-MESSAGE>\" git push origin Navigate to the original ConsenSys documentation repository, and you\u2019ll see a banner prompting you to create a PR with your recent changes. Create a PR, filling out the description according to the template. Remember to link the issue that the PR fixes in the description. fixes #<ISSUE-NUM> The bottom of the PR page displays a list of checks that verify links, Markdown syntax, and more. If you have any errors , make any required changes to your PR, repeating steps 5\u20137. In the right sidebar of your PR, select the reviewer(s) who should review your PR (typically the original issue raiser). Ask the ConsenSys documentation team to review by selecting ConsenSys/protocol-pliny as a reviewer. If you don\u2019t know who to choose or can\u2019t because you\u2019re not a maintainer yet, select the reviewers listed by GitHub or keep the default value. Make any required changes to your PR based on reviewer feedback, repeating steps 5\u20137. After your PR is validated, all checks have passed, and your branch has no conflicts with the target branch, you can merge your PR. You can delete the topic branch after merging your PR. Tip You can use a Git client such as Fork instead of the command line. The following is a video demonstration of the contribution workflow:","title":"Contribution workflow"},{"location":"contribute/#code-of-conduct","text":"This project and everyone participating in it are governed by the contributor covenant code of conduct . By contributing to documentation, you\u2019re expected to uphold this code. Please report unacceptable behavior to private-quorum@consensys.net .","title":"Code of conduct"},{"location":"contribute/#contributor-license-agreement","text":"When you submit a PR for your first contribution to a documentation repository, you must read and sign the ConsenSys Individual Contributor License Agreement (CLA) when prompted before you can merge the PR. If you\u2019re new to Git, you can try the Learn Git Branching interactive tutorial . \u21a9","title":"Contributor License Agreement"},{"location":"contribute/create-diagram/","text":"Create a diagram \u00b6 ConsenSys documentation sites contain diagrams created using Figma . You must have access to the ConsenSys Quorum Diagrams template files on Figma to create a diagram. You can add a diagram to the documentation using the normal contribution workflow of creating a pull request (PR). Create diagrams to illustrate: Detailed or simplified product architecture. Technical processes and flows. Concept charts and tables. Demo \u00b6 The following video demonstrates creating a diagram for the GoQuorum documentation using Figma: Figma diagram guidelines \u00b6 Use the following general guidelines when creating ConsenSys diagrams on Figma. Refer to the Figma help website for more information on getting started with Figma, Figma design elements, and more. Basics \u00b6 In the Quorum Diagrams file on Figma, each page contains diagrams for a different product. When creating a new diagram, create a new white frame in the product\u2019s page. Add frames within the white frame for each iteration of the diagram. For each diagram, create a frame 756px wide using the Global Background color (#F6F6F6). You can resize a diagram\u2019s height, but keep the width at 756px. Anchor your elements to the frame using Left and Top constraints . You can group and rename and organize elements. Tips Hold down Cmd on Mac or Ctrl on Windows to select elements excluding the frame. Hold down Option and drag to duplicate an element. Style \u00b6 Use the premade diagram assets as starting points. By default, you can adjust the width of the premade labels, but the height is automatically sized to the number of lines of text. To freely customize a component, right-click on it, detach instance , and remove auto layout . Use the pre-defined color styles or black (#00000). Use rounded corners of radius 2 for rectangular labels and containers. Evenly align elements. Represent similar conceptual elements using similar styles. For example, represent two nodes using a dark gradient, and represent two external components using a light gradient. You can reuse existing icons from any diagram on any page. For example, there are already icons to represent databases, dapps, keys, locks, and logos. Tip Hold down Shift when drawing, resizing, and rotating to create perfect horizontal and vertical lines. Text \u00b6 Use font Roboto for all text. Use font sizes between 10\u201318. Use sentence-style capitalization in labels and titles. Arrows and lines \u00b6 Use a thickness of 2 for arrows, lines, borders, and other strokes. Use Triangle arrow heads. Use straight arrows and lines, with right-angle bends if needed. Don\u2019t use diagonal arrows and lines. If possible, don\u2019t overlap arrows and lines. To create additional bends in an arrow or line, detach instance (if applicable), double-click the arrow or line, and click and drag the anchor points. Leave about 3px of space between arrow heads and the elements they point to. Line ends without arrow heads should touch the connecting element. Example See the Figma documentation on the Arrow Tool for more information. Export \u00b6 To export your diagram: Select the frame of your diagram. Make sure all elements of your diagram are contained in the frame. The name of this frame will be the name of the exported image. Scroll to the bottom of the right sidebar. In the Export section, choose 2x scale (for retina screens) and PNG or SVG file format. Export the diagram to the image folder of the documentation site (for example, doc.goquorum/docs/images ). See Figma\u2019s guide to exports for more information. Embed the diagram into a documentation page using ![<alternative description of your image>](<path to your image file> \"optional image title\") , then create your PR. When your diagram is finalized and merged into the documentation, list the finalization date next to the diagram in Figma.","title":"Create a diagram"},{"location":"contribute/create-diagram/#create-a-diagram","text":"ConsenSys documentation sites contain diagrams created using Figma . You must have access to the ConsenSys Quorum Diagrams template files on Figma to create a diagram. You can add a diagram to the documentation using the normal contribution workflow of creating a pull request (PR). Create diagrams to illustrate: Detailed or simplified product architecture. Technical processes and flows. Concept charts and tables.","title":"Create a diagram"},{"location":"contribute/create-diagram/#demo","text":"The following video demonstrates creating a diagram for the GoQuorum documentation using Figma:","title":"Demo"},{"location":"contribute/create-diagram/#figma-diagram-guidelines","text":"Use the following general guidelines when creating ConsenSys diagrams on Figma. Refer to the Figma help website for more information on getting started with Figma, Figma design elements, and more.","title":"Figma diagram guidelines"},{"location":"contribute/create-diagram/#basics","text":"In the Quorum Diagrams file on Figma, each page contains diagrams for a different product. When creating a new diagram, create a new white frame in the product\u2019s page. Add frames within the white frame for each iteration of the diagram. For each diagram, create a frame 756px wide using the Global Background color (#F6F6F6). You can resize a diagram\u2019s height, but keep the width at 756px. Anchor your elements to the frame using Left and Top constraints . You can group and rename and organize elements. Tips Hold down Cmd on Mac or Ctrl on Windows to select elements excluding the frame. Hold down Option and drag to duplicate an element.","title":"Basics"},{"location":"contribute/create-diagram/#style","text":"Use the premade diagram assets as starting points. By default, you can adjust the width of the premade labels, but the height is automatically sized to the number of lines of text. To freely customize a component, right-click on it, detach instance , and remove auto layout . Use the pre-defined color styles or black (#00000). Use rounded corners of radius 2 for rectangular labels and containers. Evenly align elements. Represent similar conceptual elements using similar styles. For example, represent two nodes using a dark gradient, and represent two external components using a light gradient. You can reuse existing icons from any diagram on any page. For example, there are already icons to represent databases, dapps, keys, locks, and logos. Tip Hold down Shift when drawing, resizing, and rotating to create perfect horizontal and vertical lines.","title":"Style"},{"location":"contribute/create-diagram/#text","text":"Use font Roboto for all text. Use font sizes between 10\u201318. Use sentence-style capitalization in labels and titles.","title":"Text"},{"location":"contribute/create-diagram/#arrows-and-lines","text":"Use a thickness of 2 for arrows, lines, borders, and other strokes. Use Triangle arrow heads. Use straight arrows and lines, with right-angle bends if needed. Don\u2019t use diagonal arrows and lines. If possible, don\u2019t overlap arrows and lines. To create additional bends in an arrow or line, detach instance (if applicable), double-click the arrow or line, and click and drag the anchor points. Leave about 3px of space between arrow heads and the elements they point to. Line ends without arrow heads should touch the connecting element. Example See the Figma documentation on the Arrow Tool for more information.","title":"Arrows and lines"},{"location":"contribute/create-diagram/#export","text":"To export your diagram: Select the frame of your diagram. Make sure all elements of your diagram are contained in the frame. The name of this frame will be the name of the exported image. Scroll to the bottom of the right sidebar. In the Export section, choose 2x scale (for retina screens) and PNG or SVG file format. Export the diagram to the image folder of the documentation site (for example, doc.goquorum/docs/images ). See Figma\u2019s guide to exports for more information. Embed the diagram into a documentation page using ![<alternative description of your image>](<path to your image file> \"optional image title\") , then create your PR. When your diagram is finalized and merged into the documentation, list the finalization date next to the diagram in Figma.","title":"Export"},{"location":"contribute/fix-cicd-errors/","text":"Fix CI/CD errors \u00b6 Documentation sites that use the old system use CircleCI to verify links, Markdown syntax, writing style, and more on all documentation changes. This section describes the four CI error types and how to fix them: build errors linkchecker errors markdownlint errors vale errors Submitting or updating a PR automatically runs all CI checks, displaying a checklist at the bottom of the PR page. Manually re-running a failed job on CircleCI requires a ConsenSys account. Anyone can run the CI checks on their local machine using the local tests helper scripts . Important The new documentation system doesn\u2019t use CircleCI, but runs Markdown and link tests that you can view and fix in a similar way. build errors \u00b6 The build job builds the documentation using MkDocs in strict mode, failing on both errors and warnings. Select the build Details , which takes you to the CircleCI site. Check the error message under Run MkDocs and make any required fixes. The best way to reproduce the error is by running mkdocs build -s locally in a virtual environment . linkchecker errors \u00b6 The linkchecker job verifies links. Select the linkchecker Details , which takes you to the CircleCI site. The error message under Run markdown link checker displays all the broken links and their HTTP error codes. HTTP error codes include: 404 - The page doesn\u2019t exist anymore. Update the link. 4xx - Refer to the full list of HTTP codes . 5xx - The web server is experiencing issues. You may re-run the job later. Example FILE: ./docs/index.md [ \u2713 ] Concepts/Overview.md \u2192 Status: 200 [ \u2716 ] https://consensys.net/quorum/developers \u2192 Status: 503 [ \u2716 ] https://consensys.net/quorum/contact-us \u2192 Status: 503 3 links checked. ERROR: 2 dead links found! [ \u2716 ] https://consensys.net/quorum/developers \u2192 Status: 503 [ \u2716 ] https://consensys.net/quorum/contact-us \u2192 Status: 503 These errors mean the two links in ./docs/index.md to the consensys.net site don\u2019t work because the server has issues. The 503 code means Service Unavailable . markdownlint errors \u00b6 The markdownlint job verifies Markdown syntax. Select the markdownlint Details , which takes you to the CircleCI site. The error message under Run Markdownlint displays Markdown errors that you must fix. These errors are also displayed in the markdownlint.out artifact. The log under Run Markdownlint info checks displays warnings that you should be aware of but don\u2019t prevent the tests from passing. These warnings are also displayed in the markdownlint_info.out artifact. Example ` docs/Reference/Responsible-Disclosure.md:18:1 MD007/ul-indent Unordered list indentation [ Expected: 2 ; Actual: 4 ] ` This indicates that you have an error in the file docs/Reference/Responsible-Disclosure.md at line 18, character 1. The error code is MD007 and the description message is Unordered list indentation [Expected: 2; Actual: 4] indicating that there are four spaces used to indent the line instead of the expected two. Fix by removing the two spaces. Frequent Markdown errors in the ConsenSys documentation include: Not trimming end-of-line spaces. You can configure your editor to automatically fix this. Not adding blank lines around lists, code blocks, or titles. Using the wrong title level (for example, starting a page with ## instead of # , or jumping from # to ### ). Not defining the language on code blocks. Manually incrementing ordered list elements. All ordered lists elements must start with 1. ; the numbers increment automatically in the rendered Markdown. Using inconsistent unordered list markers. You can use * or - to start unordered list elements, but they must be the same everywhere on a page. Using HTML when Markdown can do the job. Don\u2019t use HTML unless it\u2019s a matter of life and death! View the full list of markdownlint errors and fixes . vale errors \u00b6 The vale job verifies the documentation against basic writing guidelines configured in the common submodule vale directory . Select the vale Details , which takes you to the CircleCI site. The error message under Run Vale displays writing errors that you must fix, and warnings that you should be aware of but don\u2019t prevent the tests from passing. Example docs/Reference/CLI/CLI-Syntax.md 1349 :34 error Did you really mean Vale.Spelling 'attestions' ? 1436 :19 warning 'is used' may be passive write-good.Passive voice. Use active voice if you can. \u2716 1 error, 1 warnings and 0 suggestions in 1 file. Exited with code exit status 1 CircleCI received exit code 1 This indicates that you have one error and one warning in the file docs/Reference/CLI/CLI-Syntax.md . The error is a typo on the word attestions that should be attestations . The warning reminds you to use active voice where possible. If you\u2019re introducing a new product term not recognized by Vale: Make a documentation contribution to the doc.common repository, adding the term to the Vale accept.txt file. In the documentation repository in which you\u2019re making the original contribution, update the submodule to the latest version .","title":"Fix CI/CD errors"},{"location":"contribute/fix-cicd-errors/#fix-cicd-errors","text":"Documentation sites that use the old system use CircleCI to verify links, Markdown syntax, writing style, and more on all documentation changes. This section describes the four CI error types and how to fix them: build errors linkchecker errors markdownlint errors vale errors Submitting or updating a PR automatically runs all CI checks, displaying a checklist at the bottom of the PR page. Manually re-running a failed job on CircleCI requires a ConsenSys account. Anyone can run the CI checks on their local machine using the local tests helper scripts . Important The new documentation system doesn\u2019t use CircleCI, but runs Markdown and link tests that you can view and fix in a similar way.","title":"Fix CI/CD errors"},{"location":"contribute/fix-cicd-errors/#build-errors","text":"The build job builds the documentation using MkDocs in strict mode, failing on both errors and warnings. Select the build Details , which takes you to the CircleCI site. Check the error message under Run MkDocs and make any required fixes. The best way to reproduce the error is by running mkdocs build -s locally in a virtual environment .","title":"build errors"},{"location":"contribute/fix-cicd-errors/#linkchecker-errors","text":"The linkchecker job verifies links. Select the linkchecker Details , which takes you to the CircleCI site. The error message under Run markdown link checker displays all the broken links and their HTTP error codes. HTTP error codes include: 404 - The page doesn\u2019t exist anymore. Update the link. 4xx - Refer to the full list of HTTP codes . 5xx - The web server is experiencing issues. You may re-run the job later. Example FILE: ./docs/index.md [ \u2713 ] Concepts/Overview.md \u2192 Status: 200 [ \u2716 ] https://consensys.net/quorum/developers \u2192 Status: 503 [ \u2716 ] https://consensys.net/quorum/contact-us \u2192 Status: 503 3 links checked. ERROR: 2 dead links found! [ \u2716 ] https://consensys.net/quorum/developers \u2192 Status: 503 [ \u2716 ] https://consensys.net/quorum/contact-us \u2192 Status: 503 These errors mean the two links in ./docs/index.md to the consensys.net site don\u2019t work because the server has issues. The 503 code means Service Unavailable .","title":"linkchecker errors"},{"location":"contribute/fix-cicd-errors/#markdownlint-errors","text":"The markdownlint job verifies Markdown syntax. Select the markdownlint Details , which takes you to the CircleCI site. The error message under Run Markdownlint displays Markdown errors that you must fix. These errors are also displayed in the markdownlint.out artifact. The log under Run Markdownlint info checks displays warnings that you should be aware of but don\u2019t prevent the tests from passing. These warnings are also displayed in the markdownlint_info.out artifact. Example ` docs/Reference/Responsible-Disclosure.md:18:1 MD007/ul-indent Unordered list indentation [ Expected: 2 ; Actual: 4 ] ` This indicates that you have an error in the file docs/Reference/Responsible-Disclosure.md at line 18, character 1. The error code is MD007 and the description message is Unordered list indentation [Expected: 2; Actual: 4] indicating that there are four spaces used to indent the line instead of the expected two. Fix by removing the two spaces. Frequent Markdown errors in the ConsenSys documentation include: Not trimming end-of-line spaces. You can configure your editor to automatically fix this. Not adding blank lines around lists, code blocks, or titles. Using the wrong title level (for example, starting a page with ## instead of # , or jumping from # to ### ). Not defining the language on code blocks. Manually incrementing ordered list elements. All ordered lists elements must start with 1. ; the numbers increment automatically in the rendered Markdown. Using inconsistent unordered list markers. You can use * or - to start unordered list elements, but they must be the same everywhere on a page. Using HTML when Markdown can do the job. Don\u2019t use HTML unless it\u2019s a matter of life and death! View the full list of markdownlint errors and fixes .","title":"markdownlint errors"},{"location":"contribute/fix-cicd-errors/#vale-errors","text":"The vale job verifies the documentation against basic writing guidelines configured in the common submodule vale directory . Select the vale Details , which takes you to the CircleCI site. The error message under Run Vale displays writing errors that you must fix, and warnings that you should be aware of but don\u2019t prevent the tests from passing. Example docs/Reference/CLI/CLI-Syntax.md 1349 :34 error Did you really mean Vale.Spelling 'attestions' ? 1436 :19 warning 'is used' may be passive write-good.Passive voice. Use active voice if you can. \u2716 1 error, 1 warnings and 0 suggestions in 1 file. Exited with code exit status 1 CircleCI received exit code 1 This indicates that you have one error and one warning in the file docs/Reference/CLI/CLI-Syntax.md . The error is a typo on the word attestions that should be attestations . The warning reminds you to use active voice where possible. If you\u2019re introducing a new product term not recognized by Vale: Make a documentation contribution to the doc.common repository, adding the term to the Vale accept.txt file. In the documentation repository in which you\u2019re making the original contribution, update the submodule to the latest version .","title":"vale errors"},{"location":"contribute/review-pr/","text":"Review a pull request \u00b6 To review a documentation pull request (PR) : Go to the PR page. Select the Files changed tab and read through the documentation changes. View the rendered changes in the Read the Docs link or the GitHub Pages link . Evaluate the changes to the best of your ability, including if: The changes are technically accurate. The changes improve your understanding of the subject. The changes make sense in the context they\u2019re in. You\u2019re not left with any confusion or questions about the subject of the changes. The changes follow the writing style guidelines and the markdown guidelines . In the Files changed tab, hover over any line you want to comment on to the right of the line number, and select the plus sign (+). You can also select multiple lines at once. Add your comment, or select the file symbol to make a specific suggestion. Select Start a review , and repeat for any other comments or suggestions. When you\u2019re done commenting, select Finish your review in the upper right corner, and select: Comment if you have comments or suggestions you want the PR author to consider. Approve if you think the PR is OK to merge. Request changes if you require the author to make changes. Selecting this option requires you to re-review the PR later before the author can merge it. Submit your review.","title":"Review a pull request"},{"location":"contribute/review-pr/#review-a-pull-request","text":"To review a documentation pull request (PR) : Go to the PR page. Select the Files changed tab and read through the documentation changes. View the rendered changes in the Read the Docs link or the GitHub Pages link . Evaluate the changes to the best of your ability, including if: The changes are technically accurate. The changes improve your understanding of the subject. The changes make sense in the context they\u2019re in. You\u2019re not left with any confusion or questions about the subject of the changes. The changes follow the writing style guidelines and the markdown guidelines . In the Files changed tab, hover over any line you want to comment on to the right of the line number, and select the plus sign (+). You can also select multiple lines at once. Add your comment, or select the file symbol to make a specific suggestion. Select Start a review , and repeat for any other comments or suggestions. When you\u2019re done commenting, select Finish your review in the upper right corner, and select: Comment if you have comments or suggestions you want the PR author to consider. Approve if you think the PR is OK to merge. Request changes if you require the author to make changes. Selecting this option requires you to re-review the PR later before the author can merge it. Submit your review.","title":"Review a pull request"},{"location":"contribute/style-guide/","text":"Documentation style guide \u00b6 The following are writing style guidelines for contributing to the ConsenSys documentation. These guidelines aim to keep the documentation consistent, well-organized, and easy to understand. General guidelines \u00b6 Be consistent - Consistency helps users follow and understand the documentation. By being consistent with your word choices, visual formatting, and style of communication, users know what to expect when they read the documentation. For example, use consistent sentence structures when writing step-by-step instructions . Be simple but technically correct - Avoid technical jargon and assume the user isn\u2019t an Ethereum expert. When an understanding of a complex Ethereum concept is required, you can refer users to external resources. For example, to explain how the EVM works, link to a resource such as the Ethereum Wiki . Be proactive and suggest good practices - Anticipate users\u2019 needs and guide them through a process. This often takes the form of notes or tips alongside the main explanation. Put yourself in the user\u2019s shoes and consider what questions you\u2019d have when reading the documentation. Documenting good practices is also important. For example, instruct users to secure private keys and protect RPC endpoints in production environments. Be informative but concise - Provide enough information to help users develop a mental model of how the software works without forcing them to read too much text or redundant detail. Cut down your text by using simple words and concise sentences . Be inclusive - ConsenSys documentation aims to be inclusive to all users. Refer to the Google inclusive documentation guide and the Microsoft bias-free communication guide as starting points. Writing style guide \u00b6 ConsenSys documentation follows the Microsoft Writing Style Guide , which is a straightforward reference for natural and clear writing style. The following are some important style recommendations: Abbreviations - Avoid abbreviations and acronyms unless they\u2019re well-known or often repeated in the documentation. Use \u201cfor example\u201d instead of \u201ce.g,\u201d and \u201cthat is\u201d instead of \u201ci.e.\u201d Active voice - Use active voice where possible. Use \u201cyou\u201d to create a personal tone. Code samples - Provide code samples that can be copied and pasted in a console or editor with minimal editing, and work as expected. When writing code samples in a programming language, refer to the programming language\u2019s style guide. Always provide code samples as text in a code block; never use screenshots that would force the user to type it manually. When breaking up lines in a command sample, add line breaks ( \\ ) to ensure it can work when pasted. Don\u2019t include the console prompt ( > , $ , # , % , or the full user@mycomputer Develop % ) or other characters that would prevent the command to run when pasted. If values must be replaced in a sample, use placeholders such as <your IP address> . Contractions - Use common contractions, such as \u201cit\u2019s\u201d and \u201cyou\u2019re,\u201d to create a friendly, informal tone. Sentence case for headings - Use sentence case instead of title case for headings. \u201cWe recommend\u201d - In general, don\u2019t use first person. However, use \u201cwe recommend\u201d to introduce a product recommendation. Don\u2019t use \u201cConsenSys recommends\u201d or \u201cit is recommended.\u201d GitHub permalinks - When linking to a GitHub file, use the permanent link (permalink) to the file. You can copy the permalink by selecting the ellipses ( ... ) in the upper right corner of the file page, and selecting Copy permalink . Refer to the Microsoft Guide for any other questions on style. Documentation categories \u00b6 A typical documentation page falls into one of the following four categories: How to - How-to content provides instructions to achieve a specific outcome. How-to content assumes users already have some basic knowledge or understanding of the product. Concepts - Conceptual content provides background information and context about a feature. Conceptual content can explain what the feature is, how it works at a high level, why it\u2019s needed, and when and where it\u2019s used. Tutorials - Tutorials provide a set of end-to-end steps to complete a project. Tutorials are complete and reproducible. They don\u2019t assume users have prior knowledge of the subject or required tools. Reference - Reference content provides technical descriptions of APIs, command line options, and other elements of code. Reference content is straightforward and doesn\u2019t include long explanations or guides. A page in each category should link to the related pages in the other categories, if they exist. For more information about these documentation types and the differences between them, refer to the Divio documentation system guide .","title":"Style guide"},{"location":"contribute/style-guide/#documentation-style-guide","text":"The following are writing style guidelines for contributing to the ConsenSys documentation. These guidelines aim to keep the documentation consistent, well-organized, and easy to understand.","title":"Documentation style guide"},{"location":"contribute/style-guide/#general-guidelines","text":"Be consistent - Consistency helps users follow and understand the documentation. By being consistent with your word choices, visual formatting, and style of communication, users know what to expect when they read the documentation. For example, use consistent sentence structures when writing step-by-step instructions . Be simple but technically correct - Avoid technical jargon and assume the user isn\u2019t an Ethereum expert. When an understanding of a complex Ethereum concept is required, you can refer users to external resources. For example, to explain how the EVM works, link to a resource such as the Ethereum Wiki . Be proactive and suggest good practices - Anticipate users\u2019 needs and guide them through a process. This often takes the form of notes or tips alongside the main explanation. Put yourself in the user\u2019s shoes and consider what questions you\u2019d have when reading the documentation. Documenting good practices is also important. For example, instruct users to secure private keys and protect RPC endpoints in production environments. Be informative but concise - Provide enough information to help users develop a mental model of how the software works without forcing them to read too much text or redundant detail. Cut down your text by using simple words and concise sentences . Be inclusive - ConsenSys documentation aims to be inclusive to all users. Refer to the Google inclusive documentation guide and the Microsoft bias-free communication guide as starting points.","title":"General guidelines"},{"location":"contribute/style-guide/#writing-style-guide","text":"ConsenSys documentation follows the Microsoft Writing Style Guide , which is a straightforward reference for natural and clear writing style. The following are some important style recommendations: Abbreviations - Avoid abbreviations and acronyms unless they\u2019re well-known or often repeated in the documentation. Use \u201cfor example\u201d instead of \u201ce.g,\u201d and \u201cthat is\u201d instead of \u201ci.e.\u201d Active voice - Use active voice where possible. Use \u201cyou\u201d to create a personal tone. Code samples - Provide code samples that can be copied and pasted in a console or editor with minimal editing, and work as expected. When writing code samples in a programming language, refer to the programming language\u2019s style guide. Always provide code samples as text in a code block; never use screenshots that would force the user to type it manually. When breaking up lines in a command sample, add line breaks ( \\ ) to ensure it can work when pasted. Don\u2019t include the console prompt ( > , $ , # , % , or the full user@mycomputer Develop % ) or other characters that would prevent the command to run when pasted. If values must be replaced in a sample, use placeholders such as <your IP address> . Contractions - Use common contractions, such as \u201cit\u2019s\u201d and \u201cyou\u2019re,\u201d to create a friendly, informal tone. Sentence case for headings - Use sentence case instead of title case for headings. \u201cWe recommend\u201d - In general, don\u2019t use first person. However, use \u201cwe recommend\u201d to introduce a product recommendation. Don\u2019t use \u201cConsenSys recommends\u201d or \u201cit is recommended.\u201d GitHub permalinks - When linking to a GitHub file, use the permanent link (permalink) to the file. You can copy the permalink by selecting the ellipses ( ... ) in the upper right corner of the file page, and selecting Copy permalink . Refer to the Microsoft Guide for any other questions on style.","title":"Writing style guide"},{"location":"contribute/style-guide/#documentation-categories","text":"A typical documentation page falls into one of the following four categories: How to - How-to content provides instructions to achieve a specific outcome. How-to content assumes users already have some basic knowledge or understanding of the product. Concepts - Conceptual content provides background information and context about a feature. Conceptual content can explain what the feature is, how it works at a high level, why it\u2019s needed, and when and where it\u2019s used. Tutorials - Tutorials provide a set of end-to-end steps to complete a project. Tutorials are complete and reproducible. They don\u2019t assume users have prior knowledge of the subject or required tools. Reference - Reference content provides technical descriptions of APIs, command line options, and other elements of code. Reference content is straightforward and doesn\u2019t include long explanations or guides. A page in each category should link to the related pages in the other categories, if they exist. For more information about these documentation types and the differences between them, refer to the Divio documentation system guide .","title":"Documentation categories"},{"location":"contribute/use-common-submodule/","text":"Use the common submodule \u00b6 Documentation sites that use the old system include the doc.common repository as a Git submodule . doc.common contains templates and scripts used by the documentation repositories, and is a single place to update. doc.common includes: build_tools directory - Contains all the CircleCI -related scripts and configuration files used to verify links, Markdown syntax, writing style, and more. scripts subdirectory - Contains shortcut scripts to run the CI jobs locally to test your changes. package.json and package-lock.json - Files that must be in the documentation project root. The real files are in the common repository and symbolic links point to them from the documentation project root. custom_theme directory - Contains the MkDocs custom HTML templates, CSS and JS scripts, and images for the ConsenSys documentation custom design. Retrieve the submodule \u00b6 When you clone a documentation repository that uses the old system, use the --recursive option to retrieve the submodule. git clone --recursive <FORKED-REPO> If you didn\u2019t use the --recursive option when first cloning the repository, or if you removed the common submodule directory and links, you can fix this and update your local repository by running git submodule update --init . Update repositories to the latest submodule version \u00b6 When someone updates doc.common , you must update any forked old-system documentation repositories to the latest common submodule version in order to incorporate the common changes into your repository. You can do this by running the following commands in your project\u2019s root directory: cd common git checkout master && git pull cd .. git add common git commit -m \"updating submodule to latest\"","title":"Use the common submodule"},{"location":"contribute/use-common-submodule/#use-the-common-submodule","text":"Documentation sites that use the old system include the doc.common repository as a Git submodule . doc.common contains templates and scripts used by the documentation repositories, and is a single place to update. doc.common includes: build_tools directory - Contains all the CircleCI -related scripts and configuration files used to verify links, Markdown syntax, writing style, and more. scripts subdirectory - Contains shortcut scripts to run the CI jobs locally to test your changes. package.json and package-lock.json - Files that must be in the documentation project root. The real files are in the common repository and symbolic links point to them from the documentation project root. custom_theme directory - Contains the MkDocs custom HTML templates, CSS and JS scripts, and images for the ConsenSys documentation custom design.","title":"Use the common submodule"},{"location":"contribute/use-common-submodule/#retrieve-the-submodule","text":"When you clone a documentation repository that uses the old system, use the --recursive option to retrieve the submodule. git clone --recursive <FORKED-REPO> If you didn\u2019t use the --recursive option when first cloning the repository, or if you removed the common submodule directory and links, you can fix this and update your local repository by running git submodule update --init .","title":"Retrieve the submodule"},{"location":"contribute/use-common-submodule/#update-repositories-to-the-latest-submodule-version","text":"When someone updates doc.common , you must update any forked old-system documentation repositories to the latest common submodule version in order to incorporate the common changes into your repository. You can do this by running the following commands in your project\u2019s root directory: cd common git checkout master && git pull cd .. git add common git commit -m \"updating submodule to latest\"","title":"Update repositories to the latest submodule version"},{"location":"contribute/markdown/","text":"MkDocs and Markdown guide \u00b6 ConsenSys documentation is written using Markdown syntax. The pages in this section explain the Markdown tools, configuration, standards, and custom extensions used. Important We are currently in the process of migrating documentation sites that use the old system to the new system . All sites support the Markdown extensions . Sites that use the new system also support macros and pluglets . See the full list of features introduced by the new system .","title":"MkDocs and Markdown guide"},{"location":"contribute/markdown/#mkdocs-and-markdown-guide","text":"ConsenSys documentation is written using Markdown syntax. The pages in this section explain the Markdown tools, configuration, standards, and custom extensions used. Important We are currently in the process of migrating documentation sites that use the old system to the new system . All sites support the Markdown extensions . Sites that use the new system also support macros and pluglets . See the full list of features introduced by the new system .","title":"MkDocs and Markdown guide"},{"location":"contribute/markdown/configure-and-format/","text":"Configure and format Markdown \u00b6 MkDocs is a Python tool that generates the static HTML documentation site that is published. ConsenSys documentation uses the Material for MkDocs theme to render the HTML pages. It also comes with useful extensions . Old system MkDocs configuration \u00b6 For sites using the old documentation system , MkDocs is configured in the mdkocs.yml file at the root of the repository. This file configures: Site metadata and variables. Theme. Page navigation. Extensions. Plugins. Page redirects. If you add pages to the documentation (rather than updating existing pages), add your new pages to the nav section of mkdocs.yml . If you move an existing page to another location or rename it, the public path changes. Create a redirect in the redirects section of mkdocs.yml . New system MkDocs configuration \u00b6 For sites using the new documentation system , the MkDocs configuration is separated into several mkdocs.*.yml files. If you add pages to the documentation (rather than updating existing pages), add your new pages to mkdocs.navigation.yml . If you move an existing page to another location or rename it, the public path changes. Create a redirect in mkdocs.redirects.yml . Format Markdown for documentation \u00b6 Having a standard for formatting Markdown helps writers and reviewers navigate the code and review changes. The following are rules for formatting Markdown in ConsenSys documentation: The name of each documentation folder and Markdown file must contain only lowercase letters and dashes ( - ). For example, get-started , truffle.md , and performance-best-practices.md . Each Markdown file must contain a header composed of metadata and limited by three dashes ( - ). Example --- title: Installation overview description: Overview and requirements to install the software --- For the rest of the Markdown code, each line should be (roughly) limited to 100 columns long to be readable on any editor. You\u2019ll receive a warning, not an error, if you exceed 100 columns. Lines must be wrapped without cutting the line in the middle of a word. One line break displays as a space. Example In this example, this first sentence exceeds 100 characters, so we recommend wrapping it into multiple lines. One line break displays as a space, so this Markdown renders as one paragraph without line breaks. We also recommend starting each new sentence on a new line, even if the previous line didn't reach 100 columns, for easy reviewing. You can set a column marker in your text editor as a heuristic. Use only one first level title (prefixed with a single # ) on a page. No HTML markup can be used inside a Markdown document. You can use many extensions that have similar capabilities without HTML. There\u2019s one exception where HTML is tolerated: tables that are too complex and already exist. If possible, keep the table simple without any elements other than table , tr , and td . If using Markdown tables, format them so they\u2019re also readable in the source code. For example, add an appropriate number of spaces to align the columns in the source code. Example | Syntax | Description | | --------- | ----------- | | Name | Title | | Paragraph | Text | You can quickly formate tables by using Markdown Table Formatter or create tables from scratch using Tables Generator . Code samples should be written so that users can copy and paste them with minimal editing and have them work as expected.","title":"Configure and format Markdown"},{"location":"contribute/markdown/configure-and-format/#configure-and-format-markdown","text":"MkDocs is a Python tool that generates the static HTML documentation site that is published. ConsenSys documentation uses the Material for MkDocs theme to render the HTML pages. It also comes with useful extensions .","title":"Configure and format Markdown"},{"location":"contribute/markdown/configure-and-format/#old-system-mkdocs-configuration","text":"For sites using the old documentation system , MkDocs is configured in the mdkocs.yml file at the root of the repository. This file configures: Site metadata and variables. Theme. Page navigation. Extensions. Plugins. Page redirects. If you add pages to the documentation (rather than updating existing pages), add your new pages to the nav section of mkdocs.yml . If you move an existing page to another location or rename it, the public path changes. Create a redirect in the redirects section of mkdocs.yml .","title":"Old system MkDocs configuration"},{"location":"contribute/markdown/configure-and-format/#new-system-mkdocs-configuration","text":"For sites using the new documentation system , the MkDocs configuration is separated into several mkdocs.*.yml files. If you add pages to the documentation (rather than updating existing pages), add your new pages to mkdocs.navigation.yml . If you move an existing page to another location or rename it, the public path changes. Create a redirect in mkdocs.redirects.yml .","title":"New system MkDocs configuration"},{"location":"contribute/markdown/configure-and-format/#format-markdown-for-documentation","text":"Having a standard for formatting Markdown helps writers and reviewers navigate the code and review changes. The following are rules for formatting Markdown in ConsenSys documentation: The name of each documentation folder and Markdown file must contain only lowercase letters and dashes ( - ). For example, get-started , truffle.md , and performance-best-practices.md . Each Markdown file must contain a header composed of metadata and limited by three dashes ( - ). Example --- title: Installation overview description: Overview and requirements to install the software --- For the rest of the Markdown code, each line should be (roughly) limited to 100 columns long to be readable on any editor. You\u2019ll receive a warning, not an error, if you exceed 100 columns. Lines must be wrapped without cutting the line in the middle of a word. One line break displays as a space. Example In this example, this first sentence exceeds 100 characters, so we recommend wrapping it into multiple lines. One line break displays as a space, so this Markdown renders as one paragraph without line breaks. We also recommend starting each new sentence on a new line, even if the previous line didn't reach 100 columns, for easy reviewing. You can set a column marker in your text editor as a heuristic. Use only one first level title (prefixed with a single # ) on a page. No HTML markup can be used inside a Markdown document. You can use many extensions that have similar capabilities without HTML. There\u2019s one exception where HTML is tolerated: tables that are too complex and already exist. If possible, keep the table simple without any elements other than table , tr , and td . If using Markdown tables, format them so they\u2019re also readable in the source code. For example, add an appropriate number of spaces to align the columns in the source code. Example | Syntax | Description | | --------- | ----------- | | Name | Title | | Paragraph | Text | You can quickly formate tables by using Markdown Table Formatter or create tables from scratch using Tables Generator . Code samples should be written so that users can copy and paste them with minimal editing and have them work as expected.","title":"Format Markdown for documentation"},{"location":"contribute/markdown/extensions/","text":"Markdown extensions \u00b6 Extensions allow you to use simple Markdown syntax to achieve complex rendering. The following are the available extensions for ConsenSys documentation. Important Extensions are only available for the Markdown files under the docs directory. Abbreviations \u00b6 We recommend avoiding the use of abbreviations, but some such as \u201cPoW\u201d for \u201cproof of work\u201d or \u201cdapp\u201d for \u201cdecentralized application\u201d have become part of the Ethereum jargon. The Abbreviations extension enables defining abbreviations, so that the full form displays when you hover over the abbreviation. Define abbreviations at the end of the Markdown file. Example --- description: This is an example page --- # My example This page explains PoA networks. ... more text ... *[PoA]: proof of authority Call-outs \u00b6 The Admonition extension enables call-out blocks. These are used frequently in the ConsenSys documentation to include side content or highlight important content. Begin each call-out with three exclamation points and the call-out type . You can change the call-out title by adding it in quotes. Example syntax !!! note This is a multi-line note in the ConsenSys documentation. You can replace `note` with a different call-out type. The default note title is `Note` . Each line in the call-out content must be indented by four spaces to be included in the call-out. Example rendering Note This is a multi-line note in the ConsenSys documentation. You can replace note with a different call-out type. The default note title is Note . Each line in the call-out content must be indented by four spaces to be included in the call-out. Supported types include: Note : Used to add information about a subject that doesn\u2019t always need to be taken into account. For example, \u201cWhen running on localhost, include 127.0.0.1 as a listed IP address.\u201d Important : Used to add important information about a subject that should always be taken into account. For example, \u201cAllow Docker up to 6G of memory.\u201d Example : Used to display an example. This is often used with a code sample . Example syntax !!! example \"Example JSON result\" ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 53 , \"result\" : true } ``` Example rendering Example JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 53 , \"result\" : true } Info : Used to add non-essential detail about a subject. For example, \u201cThe miner coinbase account is one of the accounts defined in the genesis file.\u201d Tip : Used to add information that could help improve the use of a tool. For example, \u201cTo restart the private network in the future, start from step 4.\u201d Caution : Used to warn the users to proceed with caution. For example, \u201cConfiguring alternative elliptic curves is an experimental feature.\u201d Warning : Used to warn the users about something important. For example, \u201cThis will be deprecated in the next version.\u201d Critical : Used to alert the user about a potential dangerous effect such as a risk of destroying something or losing assets. For example, \u201cNever use the development private keys for production use.\u201d Collapsible call-outs \u00b6 The Details extension enables collapsible call-outs by replacing the exclamation points with question marks. The call-out can be open or collapsed by default. This helps reduce the content length and enables a faster overview of the whole page. Example syntax ???+ note \"Collapsible note\" This is a collapsible note. The plus sign makes it open by default. Remove the plus sign and it will be collapsed by default. Example rendering Collapsible note This is a collapsible note. The plus sign makes it open by default. Remove the plus sign and it will be collapsed by default. Checklists \u00b6 The Tasklist extension enables displaying an unordered list as a checklist. Example syntax - [ ] This list item has an unchecked checkbox. - [x] This list item has a checked checkbox. Example rendering This list item has an unchecked checkbox. This list item has a checked checkbox. Code samples \u00b6 The SuperFences extension enables using code blocks to present code samples in the documentation. A basic code block uses triple back ticks (`) and the language name to enable syntax highlighting . Always surround code blocks with blank lines. Example syntax ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : true } ``` Example rendering { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : true } Tabbed code blocks \u00b6 SuperFences also enables tabbed code blocks. The following example groups usage syntax and an example in different tabs in the same block. Example syntax === \"Syntax\" ```bash ethsigner --chain-id = <chainId> ``` === \"Example\" ```bash ethsigner --chain-id = 1337 ``` Example rendering Syntax ethsigner --chain-id = <chainId> Example ethsigner --chain-id = 1337 Line numbers \u00b6 SuperFences also enables adding line numbers to long code samples, which makes it easier when discussing the sample. The line numbers only appear in a code block that uses the linenums=\"1\" parameter. Example syntax ```javascript linenums=\"1\" const Web3 = require(\"web3\"); const Web3Quorum = require(\"web3js-quorum\"); const web3 = new Web3Quorum(new Web3(\"http://localhost:22000\")); web3.priv.generateAndSendRawTransaction(options); ``` Example rendering 1 2 3 4 const Web3 = require ( \"web3\" ); const Web3Quorum = require ( \"web3js-quorum\" ); const web3 = new Web3Quorum ( new Web3 ( \"http://localhost:22000\" )); web3 . priv . generateAndSendRawTransaction ( options ); Code syntax highlight \u00b6 The Highlight extension enables automatic syntax highlighting of code blocks. Define the code language after the code block delimiter to ensure correct highlighting. If you don\u2019t provide the language name, the extension attempts to automatically discover it, but this can lead to errors. Example syntax ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 51 , \"result\" : { \"startingBlock\" : \"0x5a0\" , \"currentBlock\" : \"0xad9\" , \"highestBlock\" : \"0xad9\" } } ``` Example rendering { \"jsonrpc\" : \"2.0\" , \"id\" : 51 , \"result\" : { \"startingBlock\" : \"0x5a0\" , \"currentBlock\" : \"0xad9\" , \"highestBlock\" : \"0xad9\" } } Refer to the full list of support languages . Definitions \u00b6 The Definition List extension enables listing definitions. This may be useful for creating glossaries. Example syntax Consensus layer : The layer of the Ethereum network that enforces network rules, and generates and verifies blocks. Also known as \"Ethereum 2.0\" or \"Eth2.\" Execution layer : The layer of the Ethereum network that contains and executes smart contracts. Also known as \"Ethereum 1.0\" or \"Eth1.\" Example rendering Consensus layer The layer of the Ethereum network that enforces network rules, and generates and verifies blocks. Also known as \u201cEthereum 2.0\u201d or \u201cEth2.\u201d Execution layer The layer of the Ethereum network that contains and executes smart contracts. Also known as \u201cEthereum 1.0\u201d or \u201cEth1.\u201d Emojis \u00b6 You can use emojis in the Markdown. Emojis are fun, but they can also be useful to draw the user\u2019s attention. Use only neutral emojis such as :warning: , which displays . Refer to the full list of available emojis . Footnotes \u00b6 The Footnotes extension enables adding footnotes at the end of a page. Example --- description: This is an example page --- # My example You can add a footnote[^1] to provide additional information about a subject. The footnote number displays as a clickable superscript that takes the user to the footnote. ... more text ... [ ^1 ]: The footnote goes here. A clickable arrow displays that takes the user back to the original text. When writing multi-line footnotes, indent each line with four spaces. Global content \u00b6 If you have content to be repeated on multiple pages, you can create it in a common page in the /docs/global directory and include it in all required pages. For example, use { !global/test_accounts.md! } minus the spaces between the brackets and exclamation points to include the content of the test_accounts.md page in another page. Info The exclude plugin excludes pages in the /docs/global directory (configurable in mkdocs.yml or, if using the new system, in mkdocs.exclude.yml ) from the final rendered site, since otherwise, every Markdown file is rendered and copied. It\u2019s useful to prevent global files to be reachable as standalone pages, since they\u2019re intended to be included in other pages. Excluded pages are still in the source repository, but they aren\u2019t copied in the final site and don\u2019t appear in the search results. Highlight \u00b6 The Mark extension enables highlighting of text. Text surrounded by double equal signs is highlighted in yellow. Example syntax ==This is highlighted text== Example rendering This is highlighted text Key presses \u00b6 The Keys extension enables styling key presses by surrounding them with double plus signs. Example syntax ++ctrl+alt+delete++ Example rendering Ctrl + Alt + Del Magic links \u00b6 The MagicLink extension automatically displays a URL as a link. You don\u2019t need to surround the URL with Markdown link syntax. Math \u00b6 The Arithmatex extension enables rendered math formulas in the documentation using MathJax syntax. Example syntax $\\sigma=\\displaystyle\\prod_{k=1}^t\\sigma_{i_k}^{L_{i_k}(0)}$ Constructing the threshold signature $\\sigma$ from $t$ individual signatures $\\sigma_{i_k}$, $k=1,\\dots,t$ and the Lagrange polynomials $L_{i_1}, \\dots,L_{i_t}$ associated to the set $I=\\{i _1,\\dots,i_ t\\}$ of signers. Example rendering \\(\\sigma=\\displaystyle\\prod_{k=1}^t\\sigma_{i_k}^{L_{i_k}(0)}\\) Constructing the threshold signature \\(\\sigma\\) from \\(t\\) individual signatures \\(\\sigma_{i_k}\\) , \\(k=1,\\dots,t\\) and the Lagrange polynomials \\(L_{i_1}, \\dots,L_{i_t}\\) associated to the set \\(I=\\{i_1,\\dots,i_t\\}\\) of signers. Plant UML diagrams \u00b6 You can add diagrams using Plant UML syntax. Example syntax ```plantuml format=\"svg\" alt=\"Plantum diagram example\" title=\"My super diagram\" Actor1 -> Actor2: calls Actor1 <-- Actor2: responds ``` Example rendering Strikethrough \u00b6 The Tilde extension enables displaying text strikethrough by surrounding the text with double tildes ( ~ ). Example syntax ~~This text is struck through~~ Example rendering This text is struck through Symbols \u00b6 The SmartSymbols extension enables symbols. For example, --> displays as \u2192. TOC \u00b6 The Table of Contents extension automatically displays a table of contents of the current page on the right side of the page. It displays titles to the third level (titles prefixed with ### ). This extension also displays a permalink on the right of any title. This permalink can be used to point directly to the title from another website. Variables \u00b6 The Extra Variables plugin enables using values from the extra section in mkdocs.yml , or if using the new system, from mkdocs.extra.yml , as variables in the Markdown code. For example, if you have the following in mkdocs.yml or mkdocs.extra.yml : extra: support: email: quorum@consensys.net You can display the email in any documentation page using: {{ support.email }} Videos \u00b6 Important The Video extension is only supported on the new documentation system . The MkDocs Video extension enables embedding YouTube videos. Example syntax ![ type:video ]( https://www.youtube.com/embed/rDFGvMIzHWE ) Example rendering","title":"Extensions"},{"location":"contribute/markdown/extensions/#markdown-extensions","text":"Extensions allow you to use simple Markdown syntax to achieve complex rendering. The following are the available extensions for ConsenSys documentation. Important Extensions are only available for the Markdown files under the docs directory.","title":"Markdown extensions"},{"location":"contribute/markdown/extensions/#abbreviations","text":"We recommend avoiding the use of abbreviations, but some such as \u201cPoW\u201d for \u201cproof of work\u201d or \u201cdapp\u201d for \u201cdecentralized application\u201d have become part of the Ethereum jargon. The Abbreviations extension enables defining abbreviations, so that the full form displays when you hover over the abbreviation. Define abbreviations at the end of the Markdown file. Example --- description: This is an example page --- # My example This page explains PoA networks. ... more text ... *[PoA]: proof of authority","title":"Abbreviations"},{"location":"contribute/markdown/extensions/#call-outs","text":"The Admonition extension enables call-out blocks. These are used frequently in the ConsenSys documentation to include side content or highlight important content. Begin each call-out with three exclamation points and the call-out type . You can change the call-out title by adding it in quotes. Example syntax !!! note This is a multi-line note in the ConsenSys documentation. You can replace `note` with a different call-out type. The default note title is `Note` . Each line in the call-out content must be indented by four spaces to be included in the call-out. Example rendering Note This is a multi-line note in the ConsenSys documentation. You can replace note with a different call-out type. The default note title is Note . Each line in the call-out content must be indented by four spaces to be included in the call-out. Supported types include: Note : Used to add information about a subject that doesn\u2019t always need to be taken into account. For example, \u201cWhen running on localhost, include 127.0.0.1 as a listed IP address.\u201d Important : Used to add important information about a subject that should always be taken into account. For example, \u201cAllow Docker up to 6G of memory.\u201d Example : Used to display an example. This is often used with a code sample . Example syntax !!! example \"Example JSON result\" ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 53 , \"result\" : true } ``` Example rendering Example JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 53 , \"result\" : true } Info : Used to add non-essential detail about a subject. For example, \u201cThe miner coinbase account is one of the accounts defined in the genesis file.\u201d Tip : Used to add information that could help improve the use of a tool. For example, \u201cTo restart the private network in the future, start from step 4.\u201d Caution : Used to warn the users to proceed with caution. For example, \u201cConfiguring alternative elliptic curves is an experimental feature.\u201d Warning : Used to warn the users about something important. For example, \u201cThis will be deprecated in the next version.\u201d Critical : Used to alert the user about a potential dangerous effect such as a risk of destroying something or losing assets. For example, \u201cNever use the development private keys for production use.\u201d","title":"Call-outs"},{"location":"contribute/markdown/extensions/#collapsible-call-outs","text":"The Details extension enables collapsible call-outs by replacing the exclamation points with question marks. The call-out can be open or collapsed by default. This helps reduce the content length and enables a faster overview of the whole page. Example syntax ???+ note \"Collapsible note\" This is a collapsible note. The plus sign makes it open by default. Remove the plus sign and it will be collapsed by default. Example rendering Collapsible note This is a collapsible note. The plus sign makes it open by default. Remove the plus sign and it will be collapsed by default.","title":"Collapsible call-outs"},{"location":"contribute/markdown/extensions/#checklists","text":"The Tasklist extension enables displaying an unordered list as a checklist. Example syntax - [ ] This list item has an unchecked checkbox. - [x] This list item has a checked checkbox. Example rendering This list item has an unchecked checkbox. This list item has a checked checkbox.","title":"Checklists"},{"location":"contribute/markdown/extensions/#code-samples","text":"The SuperFences extension enables using code blocks to present code samples in the documentation. A basic code block uses triple back ticks (`) and the language name to enable syntax highlighting . Always surround code blocks with blank lines. Example syntax ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : true } ``` Example rendering { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : true }","title":"Code samples"},{"location":"contribute/markdown/extensions/#tabbed-code-blocks","text":"SuperFences also enables tabbed code blocks. The following example groups usage syntax and an example in different tabs in the same block. Example syntax === \"Syntax\" ```bash ethsigner --chain-id = <chainId> ``` === \"Example\" ```bash ethsigner --chain-id = 1337 ``` Example rendering Syntax ethsigner --chain-id = <chainId> Example ethsigner --chain-id = 1337","title":"Tabbed code blocks"},{"location":"contribute/markdown/extensions/#line-numbers","text":"SuperFences also enables adding line numbers to long code samples, which makes it easier when discussing the sample. The line numbers only appear in a code block that uses the linenums=\"1\" parameter. Example syntax ```javascript linenums=\"1\" const Web3 = require(\"web3\"); const Web3Quorum = require(\"web3js-quorum\"); const web3 = new Web3Quorum(new Web3(\"http://localhost:22000\")); web3.priv.generateAndSendRawTransaction(options); ``` Example rendering 1 2 3 4 const Web3 = require ( \"web3\" ); const Web3Quorum = require ( \"web3js-quorum\" ); const web3 = new Web3Quorum ( new Web3 ( \"http://localhost:22000\" )); web3 . priv . generateAndSendRawTransaction ( options );","title":"Line numbers"},{"location":"contribute/markdown/extensions/#code-syntax-highlight","text":"The Highlight extension enables automatic syntax highlighting of code blocks. Define the code language after the code block delimiter to ensure correct highlighting. If you don\u2019t provide the language name, the extension attempts to automatically discover it, but this can lead to errors. Example syntax ```json { \"jsonrpc\" : \"2.0\" , \"id\" : 51 , \"result\" : { \"startingBlock\" : \"0x5a0\" , \"currentBlock\" : \"0xad9\" , \"highestBlock\" : \"0xad9\" } } ``` Example rendering { \"jsonrpc\" : \"2.0\" , \"id\" : 51 , \"result\" : { \"startingBlock\" : \"0x5a0\" , \"currentBlock\" : \"0xad9\" , \"highestBlock\" : \"0xad9\" } } Refer to the full list of support languages .","title":"Code syntax highlight"},{"location":"contribute/markdown/extensions/#definitions","text":"The Definition List extension enables listing definitions. This may be useful for creating glossaries. Example syntax Consensus layer : The layer of the Ethereum network that enforces network rules, and generates and verifies blocks. Also known as \"Ethereum 2.0\" or \"Eth2.\" Execution layer : The layer of the Ethereum network that contains and executes smart contracts. Also known as \"Ethereum 1.0\" or \"Eth1.\" Example rendering Consensus layer The layer of the Ethereum network that enforces network rules, and generates and verifies blocks. Also known as \u201cEthereum 2.0\u201d or \u201cEth2.\u201d Execution layer The layer of the Ethereum network that contains and executes smart contracts. Also known as \u201cEthereum 1.0\u201d or \u201cEth1.\u201d","title":"Definitions"},{"location":"contribute/markdown/extensions/#emojis","text":"You can use emojis in the Markdown. Emojis are fun, but they can also be useful to draw the user\u2019s attention. Use only neutral emojis such as :warning: , which displays . Refer to the full list of available emojis .","title":"Emojis"},{"location":"contribute/markdown/extensions/#footnotes","text":"The Footnotes extension enables adding footnotes at the end of a page. Example --- description: This is an example page --- # My example You can add a footnote[^1] to provide additional information about a subject. The footnote number displays as a clickable superscript that takes the user to the footnote. ... more text ... [ ^1 ]: The footnote goes here. A clickable arrow displays that takes the user back to the original text. When writing multi-line footnotes, indent each line with four spaces.","title":"Footnotes"},{"location":"contribute/markdown/extensions/#global-content","text":"If you have content to be repeated on multiple pages, you can create it in a common page in the /docs/global directory and include it in all required pages. For example, use { !global/test_accounts.md! } minus the spaces between the brackets and exclamation points to include the content of the test_accounts.md page in another page. Info The exclude plugin excludes pages in the /docs/global directory (configurable in mkdocs.yml or, if using the new system, in mkdocs.exclude.yml ) from the final rendered site, since otherwise, every Markdown file is rendered and copied. It\u2019s useful to prevent global files to be reachable as standalone pages, since they\u2019re intended to be included in other pages. Excluded pages are still in the source repository, but they aren\u2019t copied in the final site and don\u2019t appear in the search results.","title":"Global content"},{"location":"contribute/markdown/extensions/#highlight","text":"The Mark extension enables highlighting of text. Text surrounded by double equal signs is highlighted in yellow. Example syntax ==This is highlighted text== Example rendering This is highlighted text","title":"Highlight"},{"location":"contribute/markdown/extensions/#key-presses","text":"The Keys extension enables styling key presses by surrounding them with double plus signs. Example syntax ++ctrl+alt+delete++ Example rendering Ctrl + Alt + Del","title":"Key presses"},{"location":"contribute/markdown/extensions/#magic-links","text":"The MagicLink extension automatically displays a URL as a link. You don\u2019t need to surround the URL with Markdown link syntax.","title":"Magic links"},{"location":"contribute/markdown/extensions/#math","text":"The Arithmatex extension enables rendered math formulas in the documentation using MathJax syntax. Example syntax $\\sigma=\\displaystyle\\prod_{k=1}^t\\sigma_{i_k}^{L_{i_k}(0)}$ Constructing the threshold signature $\\sigma$ from $t$ individual signatures $\\sigma_{i_k}$, $k=1,\\dots,t$ and the Lagrange polynomials $L_{i_1}, \\dots,L_{i_t}$ associated to the set $I=\\{i _1,\\dots,i_ t\\}$ of signers. Example rendering \\(\\sigma=\\displaystyle\\prod_{k=1}^t\\sigma_{i_k}^{L_{i_k}(0)}\\) Constructing the threshold signature \\(\\sigma\\) from \\(t\\) individual signatures \\(\\sigma_{i_k}\\) , \\(k=1,\\dots,t\\) and the Lagrange polynomials \\(L_{i_1}, \\dots,L_{i_t}\\) associated to the set \\(I=\\{i_1,\\dots,i_t\\}\\) of signers.","title":"Math"},{"location":"contribute/markdown/extensions/#plant-uml-diagrams","text":"You can add diagrams using Plant UML syntax. Example syntax ```plantuml format=\"svg\" alt=\"Plantum diagram example\" title=\"My super diagram\" Actor1 -> Actor2: calls Actor1 <-- Actor2: responds ``` Example rendering","title":"Plant UML diagrams"},{"location":"contribute/markdown/extensions/#strikethrough","text":"The Tilde extension enables displaying text strikethrough by surrounding the text with double tildes ( ~ ). Example syntax ~~This text is struck through~~ Example rendering This text is struck through","title":"Strikethrough"},{"location":"contribute/markdown/extensions/#symbols","text":"The SmartSymbols extension enables symbols. For example, --> displays as \u2192.","title":"Symbols"},{"location":"contribute/markdown/extensions/#toc","text":"The Table of Contents extension automatically displays a table of contents of the current page on the right side of the page. It displays titles to the third level (titles prefixed with ### ). This extension also displays a permalink on the right of any title. This permalink can be used to point directly to the title from another website.","title":"TOC"},{"location":"contribute/markdown/extensions/#variables","text":"The Extra Variables plugin enables using values from the extra section in mkdocs.yml , or if using the new system, from mkdocs.extra.yml , as variables in the Markdown code. For example, if you have the following in mkdocs.yml or mkdocs.extra.yml : extra: support: email: quorum@consensys.net You can display the email in any documentation page using: {{ support.email }}","title":"Variables"},{"location":"contribute/markdown/extensions/#videos","text":"Important The Video extension is only supported on the new documentation system . The MkDocs Video extension enables embedding YouTube videos. Example syntax ![ type:video ]( https://www.youtube.com/embed/rDFGvMIzHWE ) Example rendering","title":"Videos"},{"location":"contribute/markdown/macros/","text":"Markdown macros \u00b6 Documentation sites that use the new system support macros, which are scripts that make some tasks faster. For example, use macros to format repeated content such as CLI option documentation. You can write macros for a Markdown page or site and use them in your content. Notes You can\u2019t use macros in an MkDocs HTML template , but the Jinja2 syntax has the same functionality. The best way to reuse a script across multiple sites is to develop a pluglet in the common Docker image instead. Page-level macros \u00b6 Macros written directly in a Markdown page are only available for the specific page. Example CLI option macro Macro definition code {% macro cli_option ( name , type = \"INTEGER\" , example = \"\" , description = \"\" , default = \"\" ) - %} ### ` {{ name }} ` === \"Syntax\" ```bash -- {{ name }} =< {{ type }} > ``` === \"Example\" ```bash -- {{ name }} = {{ example }} ``` === \"Environment variable\" ```bash {{ cli_to_env ( name ) }} = {{ example }} ``` === \"Configuration file\" ```bash {{ name }} = {{ example }} ``` {{ description }} The default is ` {{ default }} `. {% - endmacro %} Macro call code in Markdown {{ cli_option ( 'my-option' , 'INTEGER' , '42' , 'This option provides the expected answer to life, universe and everything.' , '42' ) }} Rendered result my-option \u00b6 Syntax --my-option = <INTEGER> Example --my-option = 42 Environment variable MY_OPTION = 42 Configuration file my-option = 42 This option provides the expected answer to life, universe and everything. The default is 42 . Site-level macros \u00b6 Site level macros are written in Python and are available for any page in the documentation site. Macros must be written in the main.py file at the root of the project. Example email link macro Macro definition code def define_env ( env ): \"Hook function\" # This is a demo macro that you can define for all your site. # parameters are: # address: the address prefix # domain: the email domain, using \"consensys.net\" as default if not provided. @env . macro def email ( address : str , domain : str = \"consensys.net\" ): return 'Send email at [ {address} @ {domain} ](mailto: {address} @ {domain} )' . format ( address = address , domain = domain ) Macro call code in Markdown {{ email ( \"jane.doe\" ) }} Rendered result Send email at jane.doe@consensys.net","title":"Macros"},{"location":"contribute/markdown/macros/#markdown-macros","text":"Documentation sites that use the new system support macros, which are scripts that make some tasks faster. For example, use macros to format repeated content such as CLI option documentation. You can write macros for a Markdown page or site and use them in your content. Notes You can\u2019t use macros in an MkDocs HTML template , but the Jinja2 syntax has the same functionality. The best way to reuse a script across multiple sites is to develop a pluglet in the common Docker image instead.","title":"Markdown macros"},{"location":"contribute/markdown/macros/#page-level-macros","text":"Macros written directly in a Markdown page are only available for the specific page. Example CLI option macro Macro definition code {% macro cli_option ( name , type = \"INTEGER\" , example = \"\" , description = \"\" , default = \"\" ) - %} ### ` {{ name }} ` === \"Syntax\" ```bash -- {{ name }} =< {{ type }} > ``` === \"Example\" ```bash -- {{ name }} = {{ example }} ``` === \"Environment variable\" ```bash {{ cli_to_env ( name ) }} = {{ example }} ``` === \"Configuration file\" ```bash {{ name }} = {{ example }} ``` {{ description }} The default is ` {{ default }} `. {% - endmacro %} Macro call code in Markdown {{ cli_option ( 'my-option' , 'INTEGER' , '42' , 'This option provides the expected answer to life, universe and everything.' , '42' ) }} Rendered result","title":"Page-level macros"},{"location":"contribute/markdown/macros/#my-option","text":"Syntax --my-option = <INTEGER> Example --my-option = 42 Environment variable MY_OPTION = 42 Configuration file my-option = 42 This option provides the expected answer to life, universe and everything. The default is 42 .","title":"my-option"},{"location":"contribute/markdown/macros/#site-level-macros","text":"Site level macros are written in Python and are available for any page in the documentation site. Macros must be written in the main.py file at the root of the project. Example email link macro Macro definition code def define_env ( env ): \"Hook function\" # This is a demo macro that you can define for all your site. # parameters are: # address: the address prefix # domain: the email domain, using \"consensys.net\" as default if not provided. @env . macro def email ( address : str , domain : str = \"consensys.net\" ): return 'Send email at [ {address} @ {domain} ](mailto: {address} @ {domain} )' . format ( address = address , domain = domain ) Macro call code in Markdown {{ email ( \"jane.doe\" ) }} Rendered result Send email at jane.doe@consensys.net","title":"Site-level macros"},{"location":"contribute/markdown/pluglets/","text":"Markdown pluglets \u00b6 Documentation sites that use the new system support pluglets, which are small Python scripts that you can share between documentation sites. You can use the existing pluglets or write your own . Katacoda \u00b6 The Katacoda pluglet helps you create interactive content and guides without writing HTML in Markdown pages. ConsenSys documentation has existing Katacoda scenarios to use with this pluglet. See more Katacoda scenario examples . Usage \u00b6 In the Markdown file, select the Katacoda template using the metadata syntax. Example metadata header --- template: katacoda.html title: My page title description: My page description --- Then use the following in your Markdown to display the Katacoda playground: Syntax {{ katacoda ( 'scenario' , 'color' , 'style' , hide_intro , hide_finish ) }} Parameters are the following: scenario - (required) The name of the Katacoda scenario to load, in the format account/scenario . color - (optional) The hexadecimal color (no need to add # ). The default is 213fa4 . style - (optional) The CSS style to make the playground fit your documentation. The default is height: 600px; . hide_intro - (optional) Indicates whether to hide or keep the intro page. The default is false . hide_finish - (optional) Indicates whether to hide or keep the finish page. The default is false . id - (optional) An integer if you have multiple Katacoda playgrounds on the same page. The default is 1 . Example markdown {{ katacoda ( 'consensys/doctools-doc-preview' , None , 'height: 800px;' ) }} Tip If you want to set some optional parameters but not all, you can use None as value to skip a parameter. Example playground rendering","title":"Pluglets"},{"location":"contribute/markdown/pluglets/#markdown-pluglets","text":"Documentation sites that use the new system support pluglets, which are small Python scripts that you can share between documentation sites. You can use the existing pluglets or write your own .","title":"Markdown pluglets"},{"location":"contribute/markdown/pluglets/#katacoda","text":"The Katacoda pluglet helps you create interactive content and guides without writing HTML in Markdown pages. ConsenSys documentation has existing Katacoda scenarios to use with this pluglet. See more Katacoda scenario examples .","title":"Katacoda"},{"location":"contribute/markdown/pluglets/#usage","text":"In the Markdown file, select the Katacoda template using the metadata syntax. Example metadata header --- template: katacoda.html title: My page title description: My page description --- Then use the following in your Markdown to display the Katacoda playground: Syntax {{ katacoda ( 'scenario' , 'color' , 'style' , hide_intro , hide_finish ) }} Parameters are the following: scenario - (required) The name of the Katacoda scenario to load, in the format account/scenario . color - (optional) The hexadecimal color (no need to add # ). The default is 213fa4 . style - (optional) The CSS style to make the playground fit your documentation. The default is height: 600px; . hide_intro - (optional) Indicates whether to hide or keep the intro page. The default is false . hide_finish - (optional) Indicates whether to hide or keep the finish page. The default is false . id - (optional) An integer if you have multiple Katacoda playgrounds on the same page. The default is 1 . Example markdown {{ katacoda ( 'consensys/doctools-doc-preview' , None , 'height: 800px;' ) }} Tip If you want to set some optional parameters but not all, you can use None as value to skip a parameter. Example playground rendering","title":"Usage"},{"location":"create/create-doc-site/","text":"Create a new documentation site \u00b6 The following guidelines explain how to create a new ConsenSys documentation site from the existing template. New documentation sites use the new documentation system . To create a new site, you must have permission to create a new repository in the ConsenSys GitHub organization . You can also create a new site template . Steps \u00b6 Go to the template repository (this Doctools site\u2019s repository). Select the green Use this template button. Create the new documentation repository. For consistency across documentation sites, name the repository in the format doc.<project-name> , with <project-name> lowercase. You can make this repository private or public depending on the project\u2019s needs. The new repository is created. Update the About information. In your repository\u2019s Settings , update the configuration as follows: Template repository Wikis Restrict editing to users in teams with push access only Issues Allow forking Sponsorships or Projects (depends on your needs) or Discussions (depends on your needs) Allow merge commits Allow squash merging Allow rebase merging Allow auto-merge Automatically delete head branches Include Git LFS objects in archives In the Access settings: You should already be an admin on this repository. Add the documentation team ConsenSys/protocol-pliny as an admin too. Add your team as maintainers (add the GitHub team instead of individual users). In the Branches settings: Add a new branch protection rule for the main branch with the following configuration: Branch name pattern is main Require a pull request before merging Require status checks to pass before merging Require branches to be up to date before merging Require conversation resolution before merging Include administrators The rest are unchecked In the Actions settings: If the repository is private, select Allow all actions . If the repository is public, select Allow select actions and add the following configuration: Allow actions created by GitHub Allow specified actions FranzDiebold/github-env-vars-action@*, JamesIves/github-pages-deploy-action@*, actions/checkout@v2, gaurav-nelson/github-action-markdown-link-check@*, github/super-linter/slim@*, jakejarvis/s3-sync-action@*, marocchino/sticky-pull-request-comment@*, In the Secrets settings, ask the ConsenSys docOps team to set up the following secrets: AWS_ACCESS_KEY_ID from docops_doctool_doc_site_deployer IAM user AWS_SECRET_ACCESS_KEY from docops_doctool_doc_site_deployer IAM user AWS_S3_BUCKET , the S3 bucket to which to publish the documentation site AWS_REGION , the region where your S3 bucket is located (for example, us-east-2 ) PROJECT , the project name to be used as folder name and key SITE_ROOT , the documentation site root path including the project name and a leading / (for example, https://consensys.net/docs/doctools/ ) If your repository is public, set up a Contributor License Agreement with cla-assistant .","title":"Create a new documentation site"},{"location":"create/create-doc-site/#create-a-new-documentation-site","text":"The following guidelines explain how to create a new ConsenSys documentation site from the existing template. New documentation sites use the new documentation system . To create a new site, you must have permission to create a new repository in the ConsenSys GitHub organization . You can also create a new site template .","title":"Create a new documentation site"},{"location":"create/create-doc-site/#steps","text":"Go to the template repository (this Doctools site\u2019s repository). Select the green Use this template button. Create the new documentation repository. For consistency across documentation sites, name the repository in the format doc.<project-name> , with <project-name> lowercase. You can make this repository private or public depending on the project\u2019s needs. The new repository is created. Update the About information. In your repository\u2019s Settings , update the configuration as follows: Template repository Wikis Restrict editing to users in teams with push access only Issues Allow forking Sponsorships or Projects (depends on your needs) or Discussions (depends on your needs) Allow merge commits Allow squash merging Allow rebase merging Allow auto-merge Automatically delete head branches Include Git LFS objects in archives In the Access settings: You should already be an admin on this repository. Add the documentation team ConsenSys/protocol-pliny as an admin too. Add your team as maintainers (add the GitHub team instead of individual users). In the Branches settings: Add a new branch protection rule for the main branch with the following configuration: Branch name pattern is main Require a pull request before merging Require status checks to pass before merging Require branches to be up to date before merging Require conversation resolution before merging Include administrators The rest are unchecked In the Actions settings: If the repository is private, select Allow all actions . If the repository is public, select Allow select actions and add the following configuration: Allow actions created by GitHub Allow specified actions FranzDiebold/github-env-vars-action@*, JamesIves/github-pages-deploy-action@*, actions/checkout@v2, gaurav-nelson/github-action-markdown-link-check@*, github/super-linter/slim@*, jakejarvis/s3-sync-action@*, marocchino/sticky-pull-request-comment@*, In the Secrets settings, ask the ConsenSys docOps team to set up the following secrets: AWS_ACCESS_KEY_ID from docops_doctool_doc_site_deployer IAM user AWS_SECRET_ACCESS_KEY from docops_doctool_doc_site_deployer IAM user AWS_S3_BUCKET , the S3 bucket to which to publish the documentation site AWS_REGION , the region where your S3 bucket is located (for example, us-east-2 ) PROJECT , the project name to be used as folder name and key SITE_ROOT , the documentation site root path including the project name and a leading / (for example, https://consensys.net/docs/doctools/ ) If your repository is public, set up a Contributor License Agreement with cla-assistant .","title":"Steps"},{"location":"create/advanced/add-css-and-js/","text":"Add custom CSS and JavaScript \u00b6 The following guidelines explain how to add CSS and JavaScript (JS) to documentation sites that use the new system without modifying the common documentation theme. Extra script and style configuration enables individual sites to have a specific color scheme or to run scripts in addition to the common set of scripts. These scripts and styles are loaded on all pages of the documentation site. Add scripts and styles by updating the mkdocs.extra.yml configuration file. Custom CSS and JS files example Create new docs/assets/stylesheets/ and docs/assets/javascripts/ folders. Create a CSS file docs/assets/stylesheets/a_custom_style.css and a JS file docs/assets/javascripts/a_custom_script.js . Modify mkdocs.extra.yml with the following: extra_css : - assets/stylesheets/a_custom_style.css extra_javascript : - assets/javascripts/a_custom_script.js","title":"Add custom CSS and JavaScript"},{"location":"create/advanced/add-css-and-js/#add-custom-css-and-javascript","text":"The following guidelines explain how to add CSS and JavaScript (JS) to documentation sites that use the new system without modifying the common documentation theme. Extra script and style configuration enables individual sites to have a specific color scheme or to run scripts in addition to the common set of scripts. These scripts and styles are loaded on all pages of the documentation site. Add scripts and styles by updating the mkdocs.extra.yml configuration file. Custom CSS and JS files example Create new docs/assets/stylesheets/ and docs/assets/javascripts/ folders. Create a CSS file docs/assets/stylesheets/a_custom_style.css and a JS file docs/assets/javascripts/a_custom_script.js . Modify mkdocs.extra.yml with the following: extra_css : - assets/stylesheets/a_custom_style.css extra_javascript : - assets/javascripts/a_custom_script.js","title":"Add custom CSS and JavaScript"},{"location":"create/advanced/create-site-template/","text":"Update or create a site template \u00b6 The following guidelines explain how to update or create a documentation site template. Documentation sites that use the new system use this Doctools template. You might update the template because of a bug or to add a new feature that should be used by all documentation sites that use the template. You might create a new template for a new need, a new tool, or a variant only used on some sites. Prerequisites \u00b6 You must have Docker installed. The Docker configuration affects the speed at which your site preview is rebuilt. For example, a normal build time for this Doctools site is around five seconds. We recommend the following configuration: 6 CPUs 6GB RAM 1GB swap Warning If using macOS, don\u2019t activate the experimental Docker Desktop Virtualization framework. It slows down builds by at least three times. Steps \u00b6 Clone the template repository on your local machine: git clone https://github.com/ConsenSys/doctools.template-site.git Clone the builder repository on your local machine in the same directory as the template repository: git clone https://github.com/ConsenSys/doctools.action-builder.git The resulting directory tree is: your-base-dir \u251c\u2500\u2500 doctools.template-site \u2514\u2500\u2500 doctools.action-builder Create a new file name docker-compose.dev.yml in the doctools.template-site directory with the following content: docker-compose.dev.yml --- version: '3.2' services: mkdocs: container_name: mkdocs-serve-dev-doctools ports: - \"0.0.0.0:8000:8000\" image: ghcr.io/consensys/doctools-builder:dev build: context: ../doctools.action-builder/ working_dir: /workspace/ command: [\"serve\", \"--watch-theme\", \"--dirtyreload\" ,\"--dev-addr\", \"0.0.0.0:8000\"] volumes: - type: bind source: . target: /workspace - type: bind source: ../doctools.action-builder/common target: /common environment: # uncomment to output debug infos in HTML source code. Requires MINIFY=false # - DEBUG=true # uncomment to prevent HTML/CSS/JS code to be minified. Useful for debugging theme. - MINIFY=false # uncomment to prevent search index prebuild, speeds up large sites build time. - PREBUILD_INDEX=false # uncomment and change to modify the preview port # useful if running more than one local preview at the same time. # - PORT=8001 You can make the following changes to the development environment variables: DEBUG=true|false - Remove or set to false to hide debug comments, set to true to show debug comments inside the HTML source code. The default is false . MINIFY=true|false - Remove or set to false to generate readable HTML source code. The default is true . If set to true , debug comments in the source code are hidden. PREBUILD_INDEX=true|false - Remove or set to false to prevent the search index to be generated at each build and speed up the build. The default is true as it\u2019s useful for production. PORT=number - Set to a specific port number. useful if running more than one local preview at the same time. Preview the template \u00b6 To preview the documentation site template locally, go to your site directory and run: docker compose -f docker-compose.dev.yml up You can see the preview at http://0.0.0.0:8000 by default. If you keep the Docker compose service running, the site preview automatically reloads and displays most changes. If you make changes to environment variables in docker-compose.dev.yml , the system doesn\u2019t reload automatically and you must restart Docker compose to view the changes: docker compose -f docker-compose.dev.yml restart To stop the service, press Ctrl + C . Remove containers by running: docker compose -f docker-compose.dev.yml down","title":"Update or create a site template"},{"location":"create/advanced/create-site-template/#update-or-create-a-site-template","text":"The following guidelines explain how to update or create a documentation site template. Documentation sites that use the new system use this Doctools template. You might update the template because of a bug or to add a new feature that should be used by all documentation sites that use the template. You might create a new template for a new need, a new tool, or a variant only used on some sites.","title":"Update or create a site template"},{"location":"create/advanced/create-site-template/#prerequisites","text":"You must have Docker installed. The Docker configuration affects the speed at which your site preview is rebuilt. For example, a normal build time for this Doctools site is around five seconds. We recommend the following configuration: 6 CPUs 6GB RAM 1GB swap Warning If using macOS, don\u2019t activate the experimental Docker Desktop Virtualization framework. It slows down builds by at least three times.","title":"Prerequisites"},{"location":"create/advanced/create-site-template/#steps","text":"Clone the template repository on your local machine: git clone https://github.com/ConsenSys/doctools.template-site.git Clone the builder repository on your local machine in the same directory as the template repository: git clone https://github.com/ConsenSys/doctools.action-builder.git The resulting directory tree is: your-base-dir \u251c\u2500\u2500 doctools.template-site \u2514\u2500\u2500 doctools.action-builder Create a new file name docker-compose.dev.yml in the doctools.template-site directory with the following content: docker-compose.dev.yml --- version: '3.2' services: mkdocs: container_name: mkdocs-serve-dev-doctools ports: - \"0.0.0.0:8000:8000\" image: ghcr.io/consensys/doctools-builder:dev build: context: ../doctools.action-builder/ working_dir: /workspace/ command: [\"serve\", \"--watch-theme\", \"--dirtyreload\" ,\"--dev-addr\", \"0.0.0.0:8000\"] volumes: - type: bind source: . target: /workspace - type: bind source: ../doctools.action-builder/common target: /common environment: # uncomment to output debug infos in HTML source code. Requires MINIFY=false # - DEBUG=true # uncomment to prevent HTML/CSS/JS code to be minified. Useful for debugging theme. - MINIFY=false # uncomment to prevent search index prebuild, speeds up large sites build time. - PREBUILD_INDEX=false # uncomment and change to modify the preview port # useful if running more than one local preview at the same time. # - PORT=8001 You can make the following changes to the development environment variables: DEBUG=true|false - Remove or set to false to hide debug comments, set to true to show debug comments inside the HTML source code. The default is false . MINIFY=true|false - Remove or set to false to generate readable HTML source code. The default is true . If set to true , debug comments in the source code are hidden. PREBUILD_INDEX=true|false - Remove or set to false to prevent the search index to be generated at each build and speed up the build. The default is true as it\u2019s useful for production. PORT=number - Set to a specific port number. useful if running more than one local preview at the same time.","title":"Steps"},{"location":"create/advanced/create-site-template/#preview-the-template","text":"To preview the documentation site template locally, go to your site directory and run: docker compose -f docker-compose.dev.yml up You can see the preview at http://0.0.0.0:8000 by default. If you keep the Docker compose service running, the site preview automatically reloads and displays most changes. If you make changes to environment variables in docker-compose.dev.yml , the system doesn\u2019t reload automatically and you must restart Docker compose to view the changes: docker compose -f docker-compose.dev.yml restart To stop the service, press Ctrl + C . Remove containers by running: docker compose -f docker-compose.dev.yml down","title":"Preview the template"},{"location":"examples/","text":"Content examples \u00b6 Examples to copy and past to your own doc.","title":"Examples"},{"location":"examples/#content-examples","text":"Examples to copy and past to your own doc.","title":"Content examples"},{"location":"examples/home_with_button/","text":"This is a landing page, you can\u2019t add Markdown content directly. Configure the landing page using meta tags in the header: --- title: Page title description: Page description links: - link: link-url/ title: Link title ---","title":"Technical documentation for ConsenSys products"},{"location":"examples/home_with_content/","text":"ConsenSys NFT \u00b6 ConsenSys NFT is a powerful engine for managing your NFT drops and secondary transactions with a feature rich API. ConsenSys NFT eliminates the frustrations of dealing with smart contracts and allows you to mint, list, display, and collect royalties and payments securely from non-fungible and semi-fungible assets, using just a few API calls. ConsenSys NFT stores all the media files the metadata of your tokens on IPFS , a fully decentralized and immutable storage network. This means no single entity including ConsenSys NFT or the NFT creator can change the content once the smart contract is deployed. Every token minted is automatically pinned on an IPFS node such that it will never be lost. Learn about how IPFS keeps your NFT immutable and permanent through content addressing . ConsenSys NFT currently supports ERC-721 and ERC-1155 asset standards on Rinkeby , Mainnet , and Polygon . The platform supports: Custom design of token metadata via Item Types. Sending NFTs via email. Custom split of fees and royalties. Multiple ways to sell your NFTs. Webhooks to subscribe to events from ConsenSys NFT.","title":"ConsenSys NFT"},{"location":"examples/home_with_content/#consensys-nft","text":"ConsenSys NFT is a powerful engine for managing your NFT drops and secondary transactions with a feature rich API. ConsenSys NFT eliminates the frustrations of dealing with smart contracts and allows you to mint, list, display, and collect royalties and payments securely from non-fungible and semi-fungible assets, using just a few API calls. ConsenSys NFT stores all the media files the metadata of your tokens on IPFS , a fully decentralized and immutable storage network. This means no single entity including ConsenSys NFT or the NFT creator can change the content once the smart contract is deployed. Every token minted is automatically pinned on an IPFS node such that it will never be lost. Learn about how IPFS keeps your NFT immutable and permanent through content addressing . ConsenSys NFT currently supports ERC-721 and ERC-1155 asset standards on Rinkeby , Mainnet , and Polygon . The platform supports: Custom design of token metadata via Item Types. Sending NFTs via email. Custom split of fees and royalties. Multiple ways to sell your NFTs. Webhooks to subscribe to events from ConsenSys NFT.","title":"ConsenSys NFT"},{"location":"examples/support/","text":"Example support page \u00b6 If you need help on using our product, you can either ask our community or request paid support. Professional support (paid) \u00b6 ask Doctools support for a professional subscription. Professional support detail Paid subscription (yearly or monthly) SLAs Support level choice (Gold, Bronze, Silver) Business hours worldwide coverage Community support (free) \u00b6 Discord read more on Doctools site create an issue on the repository . Community support detail Free, no subscription Community led 24/7 worldwide coverage","title":"Example support page"},{"location":"examples/support/#example-support-page","text":"If you need help on using our product, you can either ask our community or request paid support.","title":"Example support page"},{"location":"examples/support/#professional-support-paid","text":"ask Doctools support for a professional subscription. Professional support detail Paid subscription (yearly or monthly) SLAs Support level choice (Gold, Bronze, Silver) Business hours worldwide coverage","title":"Professional support (paid)"},{"location":"examples/support/#community-support-free","text":"Discord read more on Doctools site create an issue on the repository . Community support detail Free, no subscription Community led 24/7 worldwide coverage","title":"Community support (free)"},{"location":"examples/write_cli_reference/","text":"Example command-line \u00b6 This reference describes the syntax of a sample Command-Line Interface (CLI) options and subcommands. Specifying options \u00b6 You can specify options: On the command-line As an environment variable In a configuration file . If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file. Environment variables \u00b6 For each command-line option, the equivalent environment variable is: remove leading -- Upper-case _ replaces - add the ENVPREFIX prefix For example, set CLI option --my-option using the ENVPREFIX_MY_OPTION environment variable. Configuration file \u00b6 Set one option and value per line in a text file. For each command-line option, the equivalent environment variable is: no case change remove leading -- For example, set --my-option=42 using the my-option=42 . Options \u00b6 To start the tool, run: my-command [ OPTIONS ] [ COMMAND ] my-option \u00b6 Syntax --my-option = <INTEGER> Example --my-option = 42 Environment variable ENVPREFIX_MY_OPTION = 42 Configuration file my-option = 42 This option provides the expected answer to life, universe and everything. The default is 42 . Tip The default can also be used to provide the result of \\(6 \\times 7\\) my-other-option \u00b6 Syntax --my-other-option = <STRING> Example --my-other-option = hello world Environment variable ENVPREFIX_MY_OTHER_OPTION = hello world Configuration file my-other-option = hello world This option provides the base code example. The default is Hello World .","title":"CLI spec"},{"location":"examples/write_cli_reference/#example-command-line","text":"This reference describes the syntax of a sample Command-Line Interface (CLI) options and subcommands.","title":"Example command-line"},{"location":"examples/write_cli_reference/#specifying-options","text":"You can specify options: On the command-line As an environment variable In a configuration file . If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file.","title":"Specifying options"},{"location":"examples/write_cli_reference/#environment-variables","text":"For each command-line option, the equivalent environment variable is: remove leading -- Upper-case _ replaces - add the ENVPREFIX prefix For example, set CLI option --my-option using the ENVPREFIX_MY_OPTION environment variable.","title":"Environment variables"},{"location":"examples/write_cli_reference/#configuration-file","text":"Set one option and value per line in a text file. For each command-line option, the equivalent environment variable is: no case change remove leading -- For example, set --my-option=42 using the my-option=42 .","title":"Configuration file"},{"location":"examples/write_cli_reference/#options","text":"To start the tool, run: my-command [ OPTIONS ] [ COMMAND ]","title":"Options"},{"location":"examples/write_cli_reference/#my-option","text":"Syntax --my-option = <INTEGER> Example --my-option = 42 Environment variable ENVPREFIX_MY_OPTION = 42 Configuration file my-option = 42 This option provides the expected answer to life, universe and everything. The default is 42 . Tip The default can also be used to provide the result of \\(6 \\times 7\\)","title":"my-option"},{"location":"examples/write_cli_reference/#my-other-option","text":"Syntax --my-other-option = <STRING> Example --my-other-option = hello world Environment variable ENVPREFIX_MY_OTHER_OPTION = hello world Configuration file my-other-option = hello world This option provides the base code example. The default is Hello World .","title":"my-other-option"},{"location":"examples/write_rest_api_reference/","text":"","title":"API spec"},{"location":"overview/","text":"ConsenSys technical documentation \u00b6 This site contains information about contributing to ConsenSys technical documentation. This site is also the template to create new documentation sites . If you have any questions about ConsenSys products or documentation, ask on Discord . Documentation system overview \u00b6 Important There are currently two documentation systems, referred to as the old system and the new system . We are currently in the process of migrating sites using the old system to the new system. Any new site created will use the new system. At the root of each ConsenSys documentation repository, the docs directory contains all the site documentation, which is generated into a static HTML website using MkDocs and the Material for MkDocs theme. The documentation is automatically updated using webhooks linking GitHub to the site when you merge a pull request in the main branch of the ConsenSys documentation repository. The system also detects tags in the GitHub repository and makes the latest stable release and previous versions available . Old documentation system \u00b6 Documentation sites that use the old documentation system are hosted by Read the Docs (RTD) . The following documentation repositories currently use the old system: doc.common Tessera Teku EthSigner Web3Signer gnark Quorum Key Manager ConsenSys Rollups Orchestrate (private) Quorum Plugins (private) New documentation system \u00b6 Documentation sites that use the new documentation system are hosted by Amazon Web Services (AWS) . The new system also introduces some new features . The following documentation repositories use the new system: Doctools (this site) GoQuorum Quorum Blockchain Service (private)","title":"ConsenSys technical documentation"},{"location":"overview/#consensys-technical-documentation","text":"This site contains information about contributing to ConsenSys technical documentation. This site is also the template to create new documentation sites . If you have any questions about ConsenSys products or documentation, ask on Discord .","title":"ConsenSys technical documentation"},{"location":"overview/#documentation-system-overview","text":"Important There are currently two documentation systems, referred to as the old system and the new system . We are currently in the process of migrating sites using the old system to the new system. Any new site created will use the new system. At the root of each ConsenSys documentation repository, the docs directory contains all the site documentation, which is generated into a static HTML website using MkDocs and the Material for MkDocs theme. The documentation is automatically updated using webhooks linking GitHub to the site when you merge a pull request in the main branch of the ConsenSys documentation repository. The system also detects tags in the GitHub repository and makes the latest stable release and previous versions available .","title":"Documentation system overview"},{"location":"overview/#old-documentation-system","text":"Documentation sites that use the old documentation system are hosted by Read the Docs (RTD) . The following documentation repositories currently use the old system: doc.common Tessera Teku EthSigner Web3Signer gnark Quorum Key Manager ConsenSys Rollups Orchestrate (private) Quorum Plugins (private)","title":"Old documentation system"},{"location":"overview/#new-documentation-system","text":"Documentation sites that use the new documentation system are hosted by Amazon Web Services (AWS) . The new system also introduces some new features . The following documentation repositories use the new system: Doctools (this site) GoQuorum Quorum Blockchain Service (private)","title":"New documentation system"},{"location":"overview/new-features/","text":"New documentation system features \u00b6 The new documentation system introduces the following new features and changes from the old system: Light and dark themes Site search widget Search suggestions while typing Search sharing Searched terms highlighted on page Search terms now visible in analytics New version selector in the header New language selector (only when a translation exists) Last update of page Sticky navigation tabs Home pages (like landing pages) and new home page design Section index pages Back to top button Instant navigation (faster search and reduced bandwidth usage) Macros and pluglets Integrated ReDoc REST API documentation from a JSON or YAML specification (local or remote) Integration of YouTube videos Per page table of contents depth configuration Simpler configuration file for contributors No common Git submodule : build, tests, and preview are included in the Docker image New hosting with AWS S3 instead of Read the Docs Sites hosted under consensys.net/docs/<project name>/<language>/<version> instead of docs.<project name>.consensys.net/<language>/<version> Accessibility compliance tool (via AccessiBe) New code linter for Markdown and all other files GitHub Pages PR preview and PR preview comment Note You can see the features list for an overview of what\u2019s still to be added and add your ideas.","title":"New system features"},{"location":"overview/new-features/#new-documentation-system-features","text":"The new documentation system introduces the following new features and changes from the old system: Light and dark themes Site search widget Search suggestions while typing Search sharing Searched terms highlighted on page Search terms now visible in analytics New version selector in the header New language selector (only when a translation exists) Last update of page Sticky navigation tabs Home pages (like landing pages) and new home page design Section index pages Back to top button Instant navigation (faster search and reduced bandwidth usage) Macros and pluglets Integrated ReDoc REST API documentation from a JSON or YAML specification (local or remote) Integration of YouTube videos Per page table of contents depth configuration Simpler configuration file for contributors No common Git submodule : build, tests, and preview are included in the Docker image New hosting with AWS S3 instead of Read the Docs Sites hosted under consensys.net/docs/<project name>/<language>/<version> instead of docs.<project name>.consensys.net/<language>/<version> Accessibility compliance tool (via AccessiBe) New code linter for Markdown and all other files GitHub Pages PR preview and PR preview comment Note You can see the features list for an overview of what\u2019s still to be added and add your ideas.","title":"New documentation system features"},{"location":"preview/new-system/","text":"Preview documentation using the new system \u00b6 Preview documentation sites that use the new system on your local machine and on GitHub Pages . Preview locally \u00b6 We recommend previewing your work locally before pushing your changes in a PR. With Docker running, follow these steps to preview your documentation site locally. Note Previewing the site locally uses the port 8000 . If you already have a service running on this port, stop it first. Pull the latest Doctools Docker image: docker pull ghcr.io/consensys/doctools-builder:latest In the project directory, run: docker-compose up -d You now have a container running locally and serving the documentation site. Preview the site at http://0.0.0.0:8000 . You can keep the website preview running in the background. Each time you save changes, the site rebuilds and refreshes to display the changes. Stop the preview by running docker-compose down in the project directory. You can preview the same documentation site again starting from step 3. Try the online demo \u00b6 The following interactive tutorial demonstrates previewing documentation locally. Preview on GitHub Pages \u00b6 When you create a PR on a documentation repository, the PR triggers checks to verify links, Markdown syntax, and more. The documentation is also built on GitHub Pages as a PR preview. You can find the link to this preview in the latest comment from the github-actions bot.","title":"Preview site using the new system"},{"location":"preview/new-system/#preview-documentation-using-the-new-system","text":"Preview documentation sites that use the new system on your local machine and on GitHub Pages .","title":"Preview documentation using the new system"},{"location":"preview/new-system/#preview-locally","text":"We recommend previewing your work locally before pushing your changes in a PR. With Docker running, follow these steps to preview your documentation site locally. Note Previewing the site locally uses the port 8000 . If you already have a service running on this port, stop it first. Pull the latest Doctools Docker image: docker pull ghcr.io/consensys/doctools-builder:latest In the project directory, run: docker-compose up -d You now have a container running locally and serving the documentation site. Preview the site at http://0.0.0.0:8000 . You can keep the website preview running in the background. Each time you save changes, the site rebuilds and refreshes to display the changes. Stop the preview by running docker-compose down in the project directory. You can preview the same documentation site again starting from step 3.","title":"Preview locally"},{"location":"preview/new-system/#try-the-online-demo","text":"The following interactive tutorial demonstrates previewing documentation locally.","title":"Try the online demo"},{"location":"preview/new-system/#preview-on-github-pages","text":"When you create a PR on a documentation repository, the PR triggers checks to verify links, Markdown syntax, and more. The documentation is also built on GitHub Pages as a PR preview. You can find the link to this preview in the latest comment from the github-actions bot.","title":"Preview on GitHub Pages"},{"location":"preview/old-system/","text":"Preview documentation using the old system \u00b6 Preview documentation sites that use the old system on your local machine and on Read the Docs . Preview locally \u00b6 We recommend previewing your work locally before pushing your changes in a PR. Since the final documentation is built with MkDocs, you must build the documentation locally with MkDocs to ensure the Markdown is correctly rendered. To preview the documentation locally: Install Python 3 . Create a virtual environment for the project: python3 -m venv env Activate the virtual environment: source env/bin/activate An (env) now appears at the beginning of your prompt. Install all the required dependencies in this virtual environment: pip install -r common/build_tools/requirements.txt Run the following command in the project directory: mkdocs serve In the output of this command, follow the link displayed on the line that looks like the following: [ I 190206 18 :48:47 server:298 ] Serving on http://127.0.0.1:8000 In this case, go to http://127.0.0.1:8000 . You can let this server run while you work on the documentation. It updates the local website automatically when you save changes in your Markdown files. Deactivate the virtual environment if you work on another Python project, by running deactivate . You can preview the same documentation site again starting from step 3 and skipping step 4, until you update Python. Preview on Read the Docs \u00b6 When you create a PR on a documentation repository, the PR triggers CircleCI checks to verify links, Markdown syntax, writing style, and more. The documentation is also built on Read the Docs (RTD) as a PR preview. You can find the link to this preview in the checklist at the bottom of your PR page. The preview only works for registered and permitted RTD users. Ask for help on Discord if needed.","title":"Preview site using the old system"},{"location":"preview/old-system/#preview-documentation-using-the-old-system","text":"Preview documentation sites that use the old system on your local machine and on Read the Docs .","title":"Preview documentation using the old system"},{"location":"preview/old-system/#preview-locally","text":"We recommend previewing your work locally before pushing your changes in a PR. Since the final documentation is built with MkDocs, you must build the documentation locally with MkDocs to ensure the Markdown is correctly rendered. To preview the documentation locally: Install Python 3 . Create a virtual environment for the project: python3 -m venv env Activate the virtual environment: source env/bin/activate An (env) now appears at the beginning of your prompt. Install all the required dependencies in this virtual environment: pip install -r common/build_tools/requirements.txt Run the following command in the project directory: mkdocs serve In the output of this command, follow the link displayed on the line that looks like the following: [ I 190206 18 :48:47 server:298 ] Serving on http://127.0.0.1:8000 In this case, go to http://127.0.0.1:8000 . You can let this server run while you work on the documentation. It updates the local website automatically when you save changes in your Markdown files. Deactivate the virtual environment if you work on another Python project, by running deactivate . You can preview the same documentation site again starting from step 3 and skipping step 4, until you update Python.","title":"Preview locally"},{"location":"preview/old-system/#preview-on-read-the-docs","text":"When you create a PR on a documentation repository, the PR triggers CircleCI checks to verify links, Markdown syntax, writing style, and more. The documentation is also built on Read the Docs (RTD) as a PR preview. You can find the link to this preview in the checklist at the bottom of your PR page. The preview only works for registered and permitted RTD users. Ask for help on Discord if needed.","title":"Preview on Read the Docs"},{"location":"reference/code-of-conduct/","text":"Contributor covenant code of conduct \u00b6 ConsenSys documentation and everyone participating in it is governed by the following contributor covenant code of conduct. By contributing to documentation, you\u2019re expected to uphold this code. This code of conduct is adapted from the Contributor Covenant . Our pledge \u00b6 In the interest of fostering an open and welcoming environment, we as ConsenSys documentation contributors and maintainers pledge to make participation in our project and community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender, level of experience and education, nationality, political identity, race, religion, sexual identity and orientation, or socioeconomic status. Our standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language. Being respectful of differing viewpoints and experiences. Gracefully accepting constructive criticism. Focusing on what\u2019s best for the community. Showing empathy towards other community members. Examples of unacceptable behavior include: Using sexualized language or imagery and unwelcome sexual attention or advances. Trolling, insulting/derogatory comments, and personal or political attacks. Public or private harassment. Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission. Other conduct which could reasonably be considered inappropriate in a professional setting. Our responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that aren\u2019t aligned to this code of conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at private-quorum@consensys.net . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who don\u2019t follow or enforce the code of conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.","title":"Code of conduct"},{"location":"reference/code-of-conduct/#contributor-covenant-code-of-conduct","text":"ConsenSys documentation and everyone participating in it is governed by the following contributor covenant code of conduct. By contributing to documentation, you\u2019re expected to uphold this code. This code of conduct is adapted from the Contributor Covenant .","title":"Contributor covenant code of conduct"},{"location":"reference/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as ConsenSys documentation contributors and maintainers pledge to make participation in our project and community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender, level of experience and education, nationality, political identity, race, religion, sexual identity and orientation, or socioeconomic status.","title":"Our pledge"},{"location":"reference/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language. Being respectful of differing viewpoints and experiences. Gracefully accepting constructive criticism. Focusing on what\u2019s best for the community. Showing empathy towards other community members. Examples of unacceptable behavior include: Using sexualized language or imagery and unwelcome sexual attention or advances. Trolling, insulting/derogatory comments, and personal or political attacks. Public or private harassment. Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission. Other conduct which could reasonably be considered inappropriate in a professional setting.","title":"Our standards"},{"location":"reference/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that aren\u2019t aligned to this code of conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our responsibilities"},{"location":"reference/code-of-conduct/#scope","text":"This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"reference/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at private-quorum@consensys.net . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who don\u2019t follow or enforce the code of conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.","title":"Enforcement"},{"location":"reference/release-process/","text":"Documentation release process \u00b6 For all ConsenSys documentation repositories, a new stable version of the documentation is released when a new version of the corresponding software is released. The process consists of one manual action and two automatically triggered actions: 1. Manually create a release on GitHub \u00b6 When a new version of the software is released, the ConsenSys documentation team manually creates a release on the corresponding GitHub documentation repository. Documentation versioning follows the same Calendar Versioning (CalVer) pattern as the software to help users match the documentation version to the software version easily. The GitHub release creation process tags the Git repository with the new version (for example, 21.1.4 ). 2. Automatically build the documentation on RTD or AWS \u00b6 When Read the Docs (RTD) (if using the old system ) or Amazon Web Services (AWS) (if using the new system ) detects a new tag on a documentation repository, RTD or AWS automatically generates the following documentation versions: Latest - Corresponds to the latest commit in the main branch of the documentation repository. CalVer - Corresponds to the tag in the main branch that was created during the release (for example, 21.1.4 ). Stable - Corresponds to the last created tag. RTD or AWS builds all three versions, all showing the same content from the same commit. As contributors continue to work on the documentation, RTD or AWS rebuilds the latest version from the latest main commit each time a new PR is merged, and the CalVer and stable versions remain behind latest. 3. Automatically activate the documentation version on RTD or AWS \u00b6 For old-system sites, by default, RTD doesn\u2019t activate or publish new CalVer versions, but ConsenSys documentation has custom rules for RTD to automatically do so. If you have access to RTD as a ConsenSys documentation maintainer, you can view these automation rules and the history of version activations in the Admin tab of the RTD documentation project. For new-system sites, AWS automatically activates and publishes new CalVer versions.","title":"Documentation release process"},{"location":"reference/release-process/#documentation-release-process","text":"For all ConsenSys documentation repositories, a new stable version of the documentation is released when a new version of the corresponding software is released. The process consists of one manual action and two automatically triggered actions:","title":"Documentation release process"},{"location":"reference/release-process/#1-manually-create-a-release-on-github","text":"When a new version of the software is released, the ConsenSys documentation team manually creates a release on the corresponding GitHub documentation repository. Documentation versioning follows the same Calendar Versioning (CalVer) pattern as the software to help users match the documentation version to the software version easily. The GitHub release creation process tags the Git repository with the new version (for example, 21.1.4 ).","title":"1. Manually create a release on GitHub"},{"location":"reference/release-process/#2-automatically-build-the-documentation-on-rtd-or-aws","text":"When Read the Docs (RTD) (if using the old system ) or Amazon Web Services (AWS) (if using the new system ) detects a new tag on a documentation repository, RTD or AWS automatically generates the following documentation versions: Latest - Corresponds to the latest commit in the main branch of the documentation repository. CalVer - Corresponds to the tag in the main branch that was created during the release (for example, 21.1.4 ). Stable - Corresponds to the last created tag. RTD or AWS builds all three versions, all showing the same content from the same commit. As contributors continue to work on the documentation, RTD or AWS rebuilds the latest version from the latest main commit each time a new PR is merged, and the CalVer and stable versions remain behind latest.","title":"2. Automatically build the documentation on RTD or AWS"},{"location":"reference/release-process/#3-automatically-activate-the-documentation-version-on-rtd-or-aws","text":"For old-system sites, by default, RTD doesn\u2019t activate or publish new CalVer versions, but ConsenSys documentation has custom rules for RTD to automatically do so. If you have access to RTD as a ConsenSys documentation maintainer, you can view these automation rules and the history of version activations in the Admin tab of the RTD documentation project. For new-system sites, AWS automatically activates and publishes new CalVer versions.","title":"3. Automatically activate the documentation version on RTD or AWS"}]}